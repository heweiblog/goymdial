// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ModuleType int64

const (
	ModuleType_DIALING ModuleType = 2
)

func (p ModuleType) String() string {
	switch p {
	case ModuleType_DIALING:
		return "DIALING"
	}
	return "<UNSET>"
}

func ModuleTypeFromString(s string) (ModuleType, error) {
	switch s {
	case "DIALING":
		return ModuleType_DIALING, nil
	}
	return ModuleType(0), fmt.Errorf("not a valid ModuleType string")
}

func ModuleTypePtr(v ModuleType) *ModuleType { return &v }

func (p ModuleType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ModuleType) UnmarshalText(text []byte) error {
	q, err := ModuleTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DialStatus int64

const (
	DialStatus_OK   DialStatus = 0
	DialStatus_FAIL DialStatus = 1
)

func (p DialStatus) String() string {
	switch p {
	case DialStatus_OK:
		return "OK"
	case DialStatus_FAIL:
		return "FAIL"
	}
	return "<UNSET>"
}

func DialStatusFromString(s string) (DialStatus, error) {
	switch s {
	case "OK":
		return DialStatus_OK, nil
	case "FAIL":
		return DialStatus_FAIL, nil
	}
	return DialStatus(0), fmt.Errorf("not a valid DialStatus string")
}

func DialStatusPtr(v DialStatus) *DialStatus { return &v }

func (p DialStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DialStatus) UnmarshalText(text []byte) error {
	q, err := DialStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type RetCode int64

const (
	RetCode_OK   RetCode = 0
	RetCode_FAIL RetCode = 1
)

func (p RetCode) String() string {
	switch p {
	case RetCode_OK:
		return "OK"
	case RetCode_FAIL:
		return "FAIL"
	}
	return "<UNSET>"
}

func RetCodeFromString(s string) (RetCode, error) {
	switch s {
	case "OK":
		return RetCode_OK, nil
	case "FAIL":
		return RetCode_FAIL, nil
	}
	return RetCode(0), fmt.Errorf("not a valid RetCode string")
}

func RetCodePtr(v RetCode) *RetCode { return &v }

func (p RetCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RetCode) UnmarshalText(text []byte) error {
	q, err := RetCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DialMethod int64

const (
	DialMethod_DIAL_TCPPORT     DialMethod = 0
	DialMethod_DIAL_IMCP        DialMethod = 1
	DialMethod_DIAL_HTTPGET     DialMethod = 2
	DialMethod_DIAL_DATABASE    DialMethod = 3
	DialMethod_DIAL_EXTHTTPGET  DialMethod = 4
	DialMethod_DIAL_EXTTCPPORT  DialMethod = 5
	DialMethod_DIAL_EXTHTTPPOST DialMethod = 6
	DialMethod_DIAL_HTTPCOMMON  DialMethod = 7
	DialMethod_DIAL_UDPPORT     DialMethod = 8
	DialMethod_DIAL_FTP         DialMethod = 9
	DialMethod_DIAL_SMTP        DialMethod = 10
	DialMethod_DIAL_SNMP        DialMethod = 11
	DialMethod_DIAL_ORACLE      DialMethod = 12
)

func (p DialMethod) String() string {
	switch p {
	case DialMethod_DIAL_TCPPORT:
		return "DIAL_TCPPORT"
	case DialMethod_DIAL_IMCP:
		return "DIAL_IMCP"
	case DialMethod_DIAL_HTTPGET:
		return "DIAL_HTTPGET"
	case DialMethod_DIAL_DATABASE:
		return "DIAL_DATABASE"
	case DialMethod_DIAL_EXTHTTPGET:
		return "DIAL_EXTHTTPGET"
	case DialMethod_DIAL_EXTTCPPORT:
		return "DIAL_EXTTCPPORT"
	case DialMethod_DIAL_EXTHTTPPOST:
		return "DIAL_EXTHTTPPOST"
	case DialMethod_DIAL_HTTPCOMMON:
		return "DIAL_HTTPCOMMON"
	case DialMethod_DIAL_UDPPORT:
		return "DIAL_UDPPORT"
	case DialMethod_DIAL_FTP:
		return "DIAL_FTP"
	case DialMethod_DIAL_SMTP:
		return "DIAL_SMTP"
	case DialMethod_DIAL_SNMP:
		return "DIAL_SNMP"
	case DialMethod_DIAL_ORACLE:
		return "DIAL_ORACLE"
	}
	return "<UNSET>"
}

func DialMethodFromString(s string) (DialMethod, error) {
	switch s {
	case "DIAL_TCPPORT":
		return DialMethod_DIAL_TCPPORT, nil
	case "DIAL_IMCP":
		return DialMethod_DIAL_IMCP, nil
	case "DIAL_HTTPGET":
		return DialMethod_DIAL_HTTPGET, nil
	case "DIAL_DATABASE":
		return DialMethod_DIAL_DATABASE, nil
	case "DIAL_EXTHTTPGET":
		return DialMethod_DIAL_EXTHTTPGET, nil
	case "DIAL_EXTTCPPORT":
		return DialMethod_DIAL_EXTTCPPORT, nil
	case "DIAL_EXTHTTPPOST":
		return DialMethod_DIAL_EXTHTTPPOST, nil
	case "DIAL_HTTPCOMMON":
		return DialMethod_DIAL_HTTPCOMMON, nil
	case "DIAL_UDPPORT":
		return DialMethod_DIAL_UDPPORT, nil
	case "DIAL_FTP":
		return DialMethod_DIAL_FTP, nil
	case "DIAL_SMTP":
		return DialMethod_DIAL_SMTP, nil
	case "DIAL_SNMP":
		return DialMethod_DIAL_SNMP, nil
	case "DIAL_ORACLE":
		return DialMethod_DIAL_ORACLE, nil
	}
	return DialMethod(0), fmt.Errorf("not a valid DialMethod string")
}

func DialMethodPtr(v DialMethod) *DialMethod { return &v }

func (p DialMethod) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DialMethod) UnmarshalText(text []byte) error {
	q, err := DialMethodFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ModuleState int64

const (
	ModuleState_STARTUP    ModuleState = 0
	ModuleState_REGISTERED ModuleState = 1
)

func (p ModuleState) String() string {
	switch p {
	case ModuleState_STARTUP:
		return "STARTUP"
	case ModuleState_REGISTERED:
		return "REGISTERED"
	}
	return "<UNSET>"
}

func ModuleStateFromString(s string) (ModuleState, error) {
	switch s {
	case "STARTUP":
		return ModuleState_STARTUP, nil
	case "REGISTERED":
		return ModuleState_REGISTERED, nil
	}
	return ModuleState(0), fmt.Errorf("not a valid ModuleState string")
}

func ModuleStatePtr(v ModuleState) *ModuleState { return &v }

func (p ModuleState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ModuleState) UnmarshalText(text []byte) error {
	q, err := ModuleStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SysCommand int64

const (
	SysCommand_RestoreConfig SysCommand = 0
)

func (p SysCommand) String() string {
	switch p {
	case SysCommand_RestoreConfig:
		return "RestoreConfig"
	}
	return "<UNSET>"
}

func SysCommandFromString(s string) (SysCommand, error) {
	switch s {
	case "RestoreConfig":
		return SysCommand_RestoreConfig, nil
	}
	return SysCommand(0), fmt.Errorf("not a valid SysCommand string")
}

func SysCommandPtr(v SysCommand) *SysCommand { return &v }

func (p SysCommand) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SysCommand) UnmarshalText(text []byte) error {
	q, err := SysCommandFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DialServerType int64

const (
	DialServerType_XPROXY     DialServerType = 0
	DialServerType_REDIRECT   DialServerType = 1
	DialServerType_XFORWARD   DialServerType = 2
	DialServerType_DATACENTER DialServerType = 3
)

func (p DialServerType) String() string {
	switch p {
	case DialServerType_XPROXY:
		return "XPROXY"
	case DialServerType_REDIRECT:
		return "REDIRECT"
	case DialServerType_XFORWARD:
		return "XFORWARD"
	case DialServerType_DATACENTER:
		return "DATACENTER"
	}
	return "<UNSET>"
}

func DialServerTypeFromString(s string) (DialServerType, error) {
	switch s {
	case "XPROXY":
		return DialServerType_XPROXY, nil
	case "REDIRECT":
		return DialServerType_REDIRECT, nil
	case "XFORWARD":
		return DialServerType_XFORWARD, nil
	case "DATACENTER":
		return DialServerType_DATACENTER, nil
	}
	return DialServerType(0), fmt.Errorf("not a valid DialServerType string")
}

func DialServerTypePtr(v DialServerType) *DialServerType { return &v }

func (p DialServerType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DialServerType) UnmarshalText(text []byte) error {
	q, err := DialServerTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SnmpDevType int64

const (
	SnmpDevType_HOST   SnmpDevType = 0
	SnmpDevType_ROUTER SnmpDevType = 1
	SnmpDevType_H3C    SnmpDevType = 2
	SnmpDevType_HUAWEI SnmpDevType = 3
	SnmpDevType_CISCO  SnmpDevType = 4
)

func (p SnmpDevType) String() string {
	switch p {
	case SnmpDevType_HOST:
		return "HOST"
	case SnmpDevType_ROUTER:
		return "ROUTER"
	case SnmpDevType_H3C:
		return "H3C"
	case SnmpDevType_HUAWEI:
		return "HUAWEI"
	case SnmpDevType_CISCO:
		return "CISCO"
	}
	return "<UNSET>"
}

func SnmpDevTypeFromString(s string) (SnmpDevType, error) {
	switch s {
	case "HOST":
		return SnmpDevType_HOST, nil
	case "ROUTER":
		return SnmpDevType_ROUTER, nil
	case "H3C":
		return SnmpDevType_H3C, nil
	case "HUAWEI":
		return SnmpDevType_HUAWEI, nil
	case "CISCO":
		return SnmpDevType_CISCO, nil
	}
	return SnmpDevType(0), fmt.Errorf("not a valid SnmpDevType string")
}

func SnmpDevTypePtr(v SnmpDevType) *SnmpDevType { return &v }

func (p SnmpDevType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SnmpDevType) UnmarshalText(text []byte) error {
	q, err := SnmpDevTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ObjectId string

func ObjectIdPtr(v ObjectId) *ObjectId { return &v }

// Attributes:
//  - ErrorCode
//  - Message
type Xception struct {
	ErrorCode int32  `thrift:"errorCode,1" json:"errorCode"`
	Message   string `thrift:"message,2" json:"message"`
}

func NewXception() *Xception {
	return &Xception{}
}

func (p *Xception) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *Xception) GetMessage() string {
	return p.Message
}
func (p *Xception) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xception) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *Xception) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Xception) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xception"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xception) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err)
	}
	return err
}

func (p *Xception) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *Xception) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xception(%+v)", *p)
}

func (p *Xception) Error() string {
	return p.String()
}

// Attributes:
//  - MState
//  - ServerState
type HeartBeatState struct {
	MState      ModuleState `thrift:"mState,1" json:"mState"`
	ServerState bool        `thrift:"serverState,2" json:"serverState"`
}

func NewHeartBeatState() *HeartBeatState {
	return &HeartBeatState{}
}

func (p *HeartBeatState) GetMState() ModuleState {
	return p.MState
}

func (p *HeartBeatState) GetServerState() bool {
	return p.ServerState
}
func (p *HeartBeatState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HeartBeatState) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ModuleState(v)
		p.MState = temp
	}
	return nil
}

func (p *HeartBeatState) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServerState = v
	}
	return nil
}

func (p *HeartBeatState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HeartBeatState"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HeartBeatState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mState", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mState (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mState: ", p), err)
	}
	return err
}

func (p *HeartBeatState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverState", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverState: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ServerState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverState (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverState: ", p), err)
	}
	return err
}

func (p *HeartBeatState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartBeatState(%+v)", *p)
}

// Attributes:
//  - Version
//  - Addr
type IpAddr struct {
	Version int32  `thrift:"version,1" json:"version"`
	Addr    string `thrift:"addr,2" json:"addr"`
}

func NewIpAddr() *IpAddr {
	return &IpAddr{}
}

func (p *IpAddr) GetVersion() int32 {
	return p.Version
}

func (p *IpAddr) GetAddr() string {
	return p.Addr
}
func (p *IpAddr) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IpAddr) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *IpAddr) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Addr = v
	}
	return nil
}

func (p *IpAddr) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpAddr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IpAddr) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *IpAddr) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addr: ", p), err)
	}
	return err
}

func (p *IpAddr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IpAddr(%+v)", *p)
}

// Attributes:
//  - IP
//  - Mask
type IpsecAddress struct {
	IP   *IpAddr `thrift:"ip,1" json:"ip"`
	Mask int32   `thrift:"mask,2" json:"mask"`
}

func NewIpsecAddress() *IpsecAddress {
	return &IpsecAddress{}
}

var IpsecAddress_IP_DEFAULT *IpAddr

func (p *IpsecAddress) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return IpsecAddress_IP_DEFAULT
	}
	return p.IP
}

func (p *IpsecAddress) GetMask() int32 {
	return p.Mask
}
func (p *IpsecAddress) IsSetIP() bool {
	return p.IP != nil
}

func (p *IpsecAddress) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IpsecAddress) readField1(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *IpsecAddress) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mask = v
	}
	return nil
}

func (p *IpsecAddress) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpsecAddress"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IpsecAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *IpsecAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mask", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mask: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Mask)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mask (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mask: ", p), err)
	}
	return err
}

func (p *IpsecAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IpsecAddress(%+v)", *p)
}

// Attributes:
//  - Name
//  - Ipsec
//  - RecordId
type SysIpSec struct {
	Name     string        `thrift:"name,1" json:"name"`
	Ipsec    *IpsecAddress `thrift:"ipsec,2" json:"ipsec"`
	RecordId string        `thrift:"recordId,3" json:"recordId"`
}

func NewSysIpSec() *SysIpSec {
	return &SysIpSec{}
}

func (p *SysIpSec) GetName() string {
	return p.Name
}

var SysIpSec_Ipsec_DEFAULT *IpsecAddress

func (p *SysIpSec) GetIpsec() *IpsecAddress {
	if !p.IsSetIpsec() {
		return SysIpSec_Ipsec_DEFAULT
	}
	return p.Ipsec
}

func (p *SysIpSec) GetRecordId() string {
	return p.RecordId
}
func (p *SysIpSec) IsSetIpsec() bool {
	return p.Ipsec != nil
}

func (p *SysIpSec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SysIpSec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SysIpSec) readField2(iprot thrift.TProtocol) error {
	p.Ipsec = &IpsecAddress{}
	if err := p.Ipsec.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ipsec), err)
	}
	return nil
}

func (p *SysIpSec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RecordId = v
	}
	return nil
}

func (p *SysIpSec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SysIpSec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SysIpSec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *SysIpSec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipsec", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipsec: ", p), err)
	}
	if err := p.Ipsec.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ipsec), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipsec: ", p), err)
	}
	return err
}

func (p *SysIpSec) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recordId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recordId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RecordId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recordId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recordId: ", p), err)
	}
	return err
}

func (p *SysIpSec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SysIpSec(%+v)", *p)
}

// Attributes:
//  - DestUrl
//  - TestMethod
//  - ExpectCode
//  - ExpectMatch
//  - ContentType
//  - Tag
type DialOption struct {
	DestUrl     string  `thrift:"destUrl,1" json:"destUrl"`
	TestMethod  string  `thrift:"testMethod,2" json:"testMethod"`
	ExpectCode  []int32 `thrift:"expectCode,3" json:"expectCode"`
	ExpectMatch string  `thrift:"expectMatch,4" json:"expectMatch"`
	ContentType string  `thrift:"contentType,5" json:"contentType"`
	Tag         int32   `thrift:"tag,6" json:"tag"`
}

func NewDialOption() *DialOption {
	return &DialOption{}
}

func (p *DialOption) GetDestUrl() string {
	return p.DestUrl
}

func (p *DialOption) GetTestMethod() string {
	return p.TestMethod
}

func (p *DialOption) GetExpectCode() []int32 {
	return p.ExpectCode
}

func (p *DialOption) GetExpectMatch() string {
	return p.ExpectMatch
}

func (p *DialOption) GetContentType() string {
	return p.ContentType
}

func (p *DialOption) GetTag() int32 {
	return p.Tag
}
func (p *DialOption) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialOption) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestUrl = v
	}
	return nil
}

func (p *DialOption) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TestMethod = v
	}
	return nil
}

func (p *DialOption) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.ExpectCode = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.ExpectCode = append(p.ExpectCode, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialOption) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ExpectMatch = v
	}
	return nil
}

func (p *DialOption) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ContentType = v
	}
	return nil
}

func (p *DialOption) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Tag = v
	}
	return nil
}

func (p *DialOption) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialOption"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialOption) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.DestUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.destUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destUrl: ", p), err)
	}
	return err
}

func (p *DialOption) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("testMethod", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:testMethod: ", p), err)
	}
	if err := oprot.WriteString(string(p.TestMethod)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.testMethod (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:testMethod: ", p), err)
	}
	return err
}

func (p *DialOption) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expectCode", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expectCode: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.ExpectCode)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ExpectCode {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expectCode: ", p), err)
	}
	return err
}

func (p *DialOption) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expectMatch", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expectMatch: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExpectMatch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expectMatch (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expectMatch: ", p), err)
	}
	return err
}

func (p *DialOption) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentType", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContentType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contentType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentType: ", p), err)
	}
	return err
}

func (p *DialOption) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Tag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tag (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tag: ", p), err)
	}
	return err
}

func (p *DialOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialOption(%+v)", *p)
}

// Attributes:
//  - Name
//  - Method
//  - Port
//  - Freq
//  - Times
//  - Passed
//  - Option
type HealthPolicyInfo struct {
	Name   string      `thrift:"name,1" json:"name"`
	Method DialMethod  `thrift:"method,2" json:"method"`
	Port   *int16      `thrift:"port,3" json:"port,omitempty"`
	Freq   int32       `thrift:"freq,4" json:"freq"`
	Times  int32       `thrift:"times,5" json:"times"`
	Passed int32       `thrift:"passed,6" json:"passed"`
	Option *DialOption `thrift:"option,7" json:"option"`
}

func NewHealthPolicyInfo() *HealthPolicyInfo {
	return &HealthPolicyInfo{}
}

func (p *HealthPolicyInfo) GetName() string {
	return p.Name
}

func (p *HealthPolicyInfo) GetMethod() DialMethod {
	return p.Method
}

var HealthPolicyInfo_Port_DEFAULT int16

func (p *HealthPolicyInfo) GetPort() int16 {
	if !p.IsSetPort() {
		return HealthPolicyInfo_Port_DEFAULT
	}
	return *p.Port
}

func (p *HealthPolicyInfo) GetFreq() int32 {
	return p.Freq
}

func (p *HealthPolicyInfo) GetTimes() int32 {
	return p.Times
}

func (p *HealthPolicyInfo) GetPassed() int32 {
	return p.Passed
}

var HealthPolicyInfo_Option_DEFAULT *DialOption

func (p *HealthPolicyInfo) GetOption() *DialOption {
	if !p.IsSetOption() {
		return HealthPolicyInfo_Option_DEFAULT
	}
	return p.Option
}
func (p *HealthPolicyInfo) IsSetPort() bool {
	return p.Port != nil
}

func (p *HealthPolicyInfo) IsSetOption() bool {
	return p.Option != nil
}

func (p *HealthPolicyInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HealthPolicyInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *HealthPolicyInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DialMethod(v)
		p.Method = temp
	}
	return nil
}

func (p *HealthPolicyInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *HealthPolicyInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Freq = v
	}
	return nil
}

func (p *HealthPolicyInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Times = v
	}
	return nil
}

func (p *HealthPolicyInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Passed = v
	}
	return nil
}

func (p *HealthPolicyInfo) readField7(iprot thrift.TProtocol) error {
	p.Option = &DialOption{}
	if err := p.Option.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option), err)
	}
	return nil
}

func (p *HealthPolicyInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HealthPolicyInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HealthPolicyInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *HealthPolicyInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err)
	}
	return err
}

func (p *HealthPolicyInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin("port", thrift.I16, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Port)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
		}
	}
	return err
}

func (p *HealthPolicyInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freq", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:freq: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Freq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.freq (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:freq: ", p), err)
	}
	return err
}

func (p *HealthPolicyInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("times", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:times: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Times)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.times (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:times: ", p), err)
	}
	return err
}

func (p *HealthPolicyInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("passed", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:passed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Passed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.passed (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:passed: ", p), err)
	}
	return err
}

func (p *HealthPolicyInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("option", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:option: ", p), err)
	}
	if err := p.Option.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:option: ", p), err)
	}
	return err
}

func (p *HealthPolicyInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HealthPolicyInfo(%+v)", *p)
}

// Attributes:
//  - Rid
//  - IP
//  - TTL
//  - Priority
//  - Enabled
type DialRecord struct {
	Rid      ObjectId `thrift:"rid,1" json:"rid"`
	IP       *IpAddr  `thrift:"ip,2" json:"ip"`
	TTL      int32    `thrift:"ttl,3" json:"ttl"`
	Priority int32    `thrift:"priority,4" json:"priority"`
	Enabled  bool     `thrift:"enabled,5" json:"enabled"`
}

func NewDialRecord() *DialRecord {
	return &DialRecord{}
}

func (p *DialRecord) GetRid() ObjectId {
	return p.Rid
}

var DialRecord_IP_DEFAULT *IpAddr

func (p *DialRecord) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return DialRecord_IP_DEFAULT
	}
	return p.IP
}

func (p *DialRecord) GetTTL() int32 {
	return p.TTL
}

func (p *DialRecord) GetPriority() int32 {
	return p.Priority
}

func (p *DialRecord) GetEnabled() bool {
	return p.Enabled
}
func (p *DialRecord) IsSetIP() bool {
	return p.IP != nil
}

func (p *DialRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialRecord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ObjectId(v)
		p.Rid = temp
	}
	return nil
}

func (p *DialRecord) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *DialRecord) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TTL = v
	}
	return nil
}

func (p *DialRecord) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Priority = v
	}
	return nil
}

func (p *DialRecord) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *DialRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialRecord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Rid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rid: ", p), err)
	}
	return err
}

func (p *DialRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *DialRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ttl: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TTL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ttl: ", p), err)
	}
	return err
}

func (p *DialRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priority", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priority: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Priority)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.priority (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priority: ", p), err)
	}
	return err
}

func (p *DialRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:enabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enabled (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:enabled: ", p), err)
	}
	return err
}

func (p *DialRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialRecord(%+v)", *p)
}

// Attributes:
//  - Rid
//  - Status
//  - Delay
type DialRecordStatus struct {
	Rid    ObjectId   `thrift:"rid,1" json:"rid"`
	Status DialStatus `thrift:"status,2" json:"status"`
	Delay  int64      `thrift:"delay,3" json:"delay"`
}

func NewDialRecordStatus() *DialRecordStatus {
	return &DialRecordStatus{}
}

func (p *DialRecordStatus) GetRid() ObjectId {
	return p.Rid
}

func (p *DialRecordStatus) GetStatus() DialStatus {
	return p.Status
}

func (p *DialRecordStatus) GetDelay() int64 {
	return p.Delay
}
func (p *DialRecordStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialRecordStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ObjectId(v)
		p.Rid = temp
	}
	return nil
}

func (p *DialRecordStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DialStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *DialRecordStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *DialRecordStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialRecordStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialRecordStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Rid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rid: ", p), err)
	}
	return err
}

func (p *DialRecordStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *DialRecordStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delay: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delay: ", p), err)
	}
	return err
}

func (p *DialRecordStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialRecordStatus(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - PolicyName
//  - StatusList
type DialHealthResult_ struct {
	GroupName  string              `thrift:"groupName,1" json:"groupName"`
	PolicyName string              `thrift:"policyName,2" json:"policyName"`
	StatusList []*DialRecordStatus `thrift:"statusList,3" json:"statusList"`
}

func NewDialHealthResult_() *DialHealthResult_ {
	return &DialHealthResult_{}
}

func (p *DialHealthResult_) GetGroupName() string {
	return p.GroupName
}

func (p *DialHealthResult_) GetPolicyName() string {
	return p.PolicyName
}

func (p *DialHealthResult_) GetStatusList() []*DialRecordStatus {
	return p.StatusList
}
func (p *DialHealthResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialHealthResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialHealthResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *DialHealthResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DialRecordStatus, 0, size)
	p.StatusList = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &DialRecordStatus{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.StatusList = append(p.StatusList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialHealthResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialHealthResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialHealthResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialHealthResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policyName: ", p), err)
	}
	return err
}

func (p *DialHealthResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statusList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StatusList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StatusList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statusList: ", p), err)
	}
	return err
}

func (p *DialHealthResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialHealthResult_(%+v)", *p)
}

// Attributes:
//  - LocalURL
//  - Priority
type DialNginxServer struct {
	LocalURL string `thrift:"localURL,1" json:"localURL"`
	Priority int32  `thrift:"priority,2" json:"priority"`
}

func NewDialNginxServer() *DialNginxServer {
	return &DialNginxServer{}
}

func (p *DialNginxServer) GetLocalURL() string {
	return p.LocalURL
}

func (p *DialNginxServer) GetPriority() int32 {
	return p.Priority
}
func (p *DialNginxServer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialNginxServer) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LocalURL = v
	}
	return nil
}

func (p *DialNginxServer) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Priority = v
	}
	return nil
}

func (p *DialNginxServer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialNginxServer"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialNginxServer) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localURL", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:localURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.LocalURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localURL (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:localURL: ", p), err)
	}
	return err
}

func (p *DialNginxServer) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priority", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:priority: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Priority)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.priority (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:priority: ", p), err)
	}
	return err
}

func (p *DialNginxServer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialNginxServer(%+v)", *p)
}

// Attributes:
//  - Server
//  - Status
//  - Delay
type DialNginxStatus struct {
	Server *DialNginxServer `thrift:"server,1" json:"server"`
	Status DialStatus       `thrift:"status,2" json:"status"`
	Delay  int64            `thrift:"delay,3" json:"delay"`
}

func NewDialNginxStatus() *DialNginxStatus {
	return &DialNginxStatus{}
}

var DialNginxStatus_Server_DEFAULT *DialNginxServer

func (p *DialNginxStatus) GetServer() *DialNginxServer {
	if !p.IsSetServer() {
		return DialNginxStatus_Server_DEFAULT
	}
	return p.Server
}

func (p *DialNginxStatus) GetStatus() DialStatus {
	return p.Status
}

func (p *DialNginxStatus) GetDelay() int64 {
	return p.Delay
}
func (p *DialNginxStatus) IsSetServer() bool {
	return p.Server != nil
}

func (p *DialNginxStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialNginxStatus) readField1(iprot thrift.TProtocol) error {
	p.Server = &DialNginxServer{}
	if err := p.Server.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Server), err)
	}
	return nil
}

func (p *DialNginxStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DialStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *DialNginxStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *DialNginxStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialNginxStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialNginxStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:server: ", p), err)
	}
	if err := p.Server.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Server), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:server: ", p), err)
	}
	return err
}

func (p *DialNginxStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *DialNginxStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delay: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delay: ", p), err)
	}
	return err
}

func (p *DialNginxStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialNginxStatus(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - PolicyName
//  - StatusList
type DialNginxResult_ struct {
	GroupName  string             `thrift:"groupName,1" json:"groupName"`
	PolicyName string             `thrift:"policyName,2" json:"policyName"`
	StatusList []*DialNginxStatus `thrift:"statusList,3" json:"statusList"`
}

func NewDialNginxResult_() *DialNginxResult_ {
	return &DialNginxResult_{}
}

func (p *DialNginxResult_) GetGroupName() string {
	return p.GroupName
}

func (p *DialNginxResult_) GetPolicyName() string {
	return p.PolicyName
}

func (p *DialNginxResult_) GetStatusList() []*DialNginxStatus {
	return p.StatusList
}
func (p *DialNginxResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialNginxResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialNginxResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *DialNginxResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DialNginxStatus, 0, size)
	p.StatusList = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &DialNginxStatus{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.StatusList = append(p.StatusList, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialNginxResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialNginxResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialNginxResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialNginxResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policyName: ", p), err)
	}
	return err
}

func (p *DialNginxResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statusList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StatusList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StatusList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statusList: ", p), err)
	}
	return err
}

func (p *DialNginxResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialNginxResult_(%+v)", *p)
}

// Attributes:
//  - Rid
//  - IP
//  - Status
//  - Delay
type DialServerStatus struct {
	Rid    ObjectId   `thrift:"rid,1" json:"rid"`
	IP     *IpAddr    `thrift:"ip,2" json:"ip"`
	Status DialStatus `thrift:"status,3" json:"status"`
	Delay  int64      `thrift:"delay,4" json:"delay"`
}

func NewDialServerStatus() *DialServerStatus {
	return &DialServerStatus{}
}

func (p *DialServerStatus) GetRid() ObjectId {
	return p.Rid
}

var DialServerStatus_IP_DEFAULT *IpAddr

func (p *DialServerStatus) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return DialServerStatus_IP_DEFAULT
	}
	return p.IP
}

func (p *DialServerStatus) GetStatus() DialStatus {
	return p.Status
}

func (p *DialServerStatus) GetDelay() int64 {
	return p.Delay
}
func (p *DialServerStatus) IsSetIP() bool {
	return p.IP != nil
}

func (p *DialServerStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialServerStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ObjectId(v)
		p.Rid = temp
	}
	return nil
}

func (p *DialServerStatus) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *DialServerStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := DialStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *DialServerStatus) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *DialServerStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialServerStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialServerStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Rid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rid: ", p), err)
	}
	return err
}

func (p *DialServerStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *DialServerStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *DialServerStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delay: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delay: ", p), err)
	}
	return err
}

func (p *DialServerStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialServerStatus(%+v)", *p)
}

// Attributes:
//  - Status
//  - Typ
type DialServerResult_ struct {
	Status *DialServerStatus `thrift:"status,1" json:"status"`
	Typ    DialServerType    `thrift:"typ,2" json:"typ"`
}

func NewDialServerResult_() *DialServerResult_ {
	return &DialServerResult_{}
}

var DialServerResult__Status_DEFAULT *DialServerStatus

func (p *DialServerResult_) GetStatus() *DialServerStatus {
	if !p.IsSetStatus() {
		return DialServerResult__Status_DEFAULT
	}
	return p.Status
}

func (p *DialServerResult_) GetTyp() DialServerType {
	return p.Typ
}
func (p *DialServerResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DialServerResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialServerResult_) readField1(iprot thrift.TProtocol) error {
	p.Status = &DialServerStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *DialServerResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DialServerType(v)
		p.Typ = temp
	}
	return nil
}

func (p *DialServerResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialServerResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialServerResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *DialServerResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("typ", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:typ: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Typ)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.typ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:typ: ", p), err)
	}
	return err
}

func (p *DialServerResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialServerResult_(%+v)", *p)
}

// Attributes:
//  - ID
//  - IP
//  - PolicyList
type DcInfo struct {
	ID         string   `thrift:"id,1" json:"id"`
	IP         *IpAddr  `thrift:"ip,2" json:"ip"`
	PolicyList []string `thrift:"PolicyList,3" json:"PolicyList"`
}

func NewDcInfo() *DcInfo {
	return &DcInfo{}
}

func (p *DcInfo) GetID() string {
	return p.ID
}

var DcInfo_IP_DEFAULT *IpAddr

func (p *DcInfo) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return DcInfo_IP_DEFAULT
	}
	return p.IP
}

func (p *DcInfo) GetPolicyList() []string {
	return p.PolicyList
}
func (p *DcInfo) IsSetIP() bool {
	return p.IP != nil
}

func (p *DcInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DcInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DcInfo) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *DcInfo) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PolicyList = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.PolicyList = append(p.PolicyList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DcInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DcInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DcInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *DcInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *DcInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PolicyList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PolicyList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PolicyList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PolicyList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PolicyList: ", p), err)
	}
	return err
}

func (p *DcInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DcInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - Policy
//  - Status
//  - Delay
type DialDcResult_ struct {
	ID     string     `thrift:"id,1" json:"id"`
	Policy string     `thrift:"policy,2" json:"policy"`
	Status DialStatus `thrift:"status,3" json:"status"`
	Delay  int64      `thrift:"delay,4" json:"delay"`
}

func NewDialDcResult_() *DialDcResult_ {
	return &DialDcResult_{}
}

func (p *DialDcResult_) GetID() string {
	return p.ID
}

func (p *DialDcResult_) GetPolicy() string {
	return p.Policy
}

func (p *DialDcResult_) GetStatus() DialStatus {
	return p.Status
}

func (p *DialDcResult_) GetDelay() int64 {
	return p.Delay
}
func (p *DialDcResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDcResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DialDcResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Policy = v
	}
	return nil
}

func (p *DialDcResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := DialStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *DialDcResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *DialDcResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DialDcResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDcResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *DialDcResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policy: ", p), err)
	}
	if err := oprot.WriteString(string(p.Policy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policy (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policy: ", p), err)
	}
	return err
}

func (p *DialDcResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *DialDcResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delay: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delay: ", p), err)
	}
	return err
}

func (p *DialDcResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDcResult_(%+v)", *p)
}

// Attributes:
//  - Enable
//  - Name
//  - Community
//  - User
//  - Passwd
//  - Version
//  - Interval
//  - Port
//  - IP
//  - Type
type SnmpGroupInfo struct {
	Enable    bool        `thrift:"enable,1" json:"enable"`
	Name      string      `thrift:"name,2" json:"name"`
	Community string      `thrift:"community,3" json:"community"`
	User      string      `thrift:"user,4" json:"user"`
	Passwd    string      `thrift:"passwd,5" json:"passwd"`
	Version   int32       `thrift:"version,6" json:"version"`
	Interval  int32       `thrift:"interval,7" json:"interval"`
	Port      int32       `thrift:"port,8" json:"port"`
	IP        *IpAddr     `thrift:"ip,9" json:"ip"`
	Type      SnmpDevType `thrift:"type,10" json:"type"`
}

func NewSnmpGroupInfo() *SnmpGroupInfo {
	return &SnmpGroupInfo{}
}

func (p *SnmpGroupInfo) GetEnable() bool {
	return p.Enable
}

func (p *SnmpGroupInfo) GetName() string {
	return p.Name
}

func (p *SnmpGroupInfo) GetCommunity() string {
	return p.Community
}

func (p *SnmpGroupInfo) GetUser() string {
	return p.User
}

func (p *SnmpGroupInfo) GetPasswd() string {
	return p.Passwd
}

func (p *SnmpGroupInfo) GetVersion() int32 {
	return p.Version
}

func (p *SnmpGroupInfo) GetInterval() int32 {
	return p.Interval
}

func (p *SnmpGroupInfo) GetPort() int32 {
	return p.Port
}

var SnmpGroupInfo_IP_DEFAULT *IpAddr

func (p *SnmpGroupInfo) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return SnmpGroupInfo_IP_DEFAULT
	}
	return p.IP
}

func (p *SnmpGroupInfo) GetType() SnmpDevType {
	return p.Type
}
func (p *SnmpGroupInfo) IsSetIP() bool {
	return p.IP != nil
}

func (p *SnmpGroupInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SnmpGroupInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Enable = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Community = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Passwd = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Interval = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *SnmpGroupInfo) readField9(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *SnmpGroupInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := SnmpDevType(v)
		p.Type = temp
	}
	return nil
}

func (p *SnmpGroupInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnmpGroupInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SnmpGroupInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enable", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Enable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enable: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("community", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:community: ", p), err)
	}
	if err := oprot.WriteString(string(p.Community)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.community (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:community: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("passwd", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:passwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Passwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.passwd (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:passwd: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:version: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interval", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:interval: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Interval)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interval (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:interval: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:port: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ip: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err)
	}
	return err
}

func (p *SnmpGroupInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnmpGroupInfo(%+v)", *p)
}

// Attributes:
//  - Index
//  - Inoctets
//  - Outoctets
type InterfaceTraffic struct {
	Index     int32 `thrift:"index,1" json:"index"`
	Inoctets  int64 `thrift:"inoctets,2" json:"inoctets"`
	Outoctets int64 `thrift:"outoctets,3" json:"outoctets"`
}

func NewInterfaceTraffic() *InterfaceTraffic {
	return &InterfaceTraffic{}
}

func (p *InterfaceTraffic) GetIndex() int32 {
	return p.Index
}

func (p *InterfaceTraffic) GetInoctets() int64 {
	return p.Inoctets
}

func (p *InterfaceTraffic) GetOutoctets() int64 {
	return p.Outoctets
}
func (p *InterfaceTraffic) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InterfaceTraffic) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *InterfaceTraffic) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Inoctets = v
	}
	return nil
}

func (p *InterfaceTraffic) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Outoctets = v
	}
	return nil
}

func (p *InterfaceTraffic) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InterfaceTraffic"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InterfaceTraffic) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err)
	}
	return err
}

func (p *InterfaceTraffic) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inoctets", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inoctets: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Inoctets)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inoctets (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inoctets: ", p), err)
	}
	return err
}

func (p *InterfaceTraffic) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outoctets", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outoctets: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Outoctets)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.outoctets (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outoctets: ", p), err)
	}
	return err
}

func (p *InterfaceTraffic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InterfaceTraffic(%+v)", *p)
}

// Attributes:
//  - Index
//  - IP
//  - Physaddress
type IpMac struct {
	Index       int32   `thrift:"index,1" json:"index"`
	IP          *IpAddr `thrift:"ip,2" json:"ip"`
	Physaddress string  `thrift:"physaddress,3" json:"physaddress"`
}

func NewIpMac() *IpMac {
	return &IpMac{}
}

func (p *IpMac) GetIndex() int32 {
	return p.Index
}

var IpMac_IP_DEFAULT *IpAddr

func (p *IpMac) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return IpMac_IP_DEFAULT
	}
	return p.IP
}

func (p *IpMac) GetPhysaddress() string {
	return p.Physaddress
}
func (p *IpMac) IsSetIP() bool {
	return p.IP != nil
}

func (p *IpMac) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IpMac) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *IpMac) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *IpMac) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Physaddress = v
	}
	return nil
}

func (p *IpMac) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpMac"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IpMac) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err)
	}
	return err
}

func (p *IpMac) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *IpMac) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("physaddress", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:physaddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.Physaddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.physaddress (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:physaddress: ", p), err)
	}
	return err
}

func (p *IpMac) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IpMac(%+v)", *p)
}

// Attributes:
//  - Macaddress
//  - Index
//  - Portname
type MacTable struct {
	Macaddress string `thrift:"macaddress,1" json:"macaddress"`
	Index      int32  `thrift:"index,2" json:"index"`
	Portname   string `thrift:"portname,3" json:"portname"`
}

func NewMacTable() *MacTable {
	return &MacTable{}
}

func (p *MacTable) GetMacaddress() string {
	return p.Macaddress
}

func (p *MacTable) GetIndex() int32 {
	return p.Index
}

func (p *MacTable) GetPortname() string {
	return p.Portname
}
func (p *MacTable) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MacTable) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Macaddress = v
	}
	return nil
}

func (p *MacTable) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *MacTable) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Portname = v
	}
	return nil
}

func (p *MacTable) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MacTable"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MacTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("macaddress", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:macaddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.Macaddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.macaddress (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:macaddress: ", p), err)
	}
	return err
}

func (p *MacTable) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err)
	}
	return err
}

func (p *MacTable) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("portname", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:portname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Portname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.portname (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:portname: ", p), err)
	}
	return err
}

func (p *MacTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MacTable(%+v)", *p)
}

// Attributes:
//  - Index
//  - Descr
//  - Type
//  - Status
//  - Speed
//  - Mtu
//  - Physaddress
type InterfaceInfo struct {
	Index       int32  `thrift:"index,1" json:"index"`
	Descr       string `thrift:"descr,2" json:"descr"`
	Type        int32  `thrift:"type,3" json:"type"`
	Status      int32  `thrift:"status,4" json:"status"`
	Speed       int64  `thrift:"speed,5" json:"speed"`
	Mtu         int32  `thrift:"mtu,6" json:"mtu"`
	Physaddress string `thrift:"physaddress,7" json:"physaddress"`
}

func NewInterfaceInfo() *InterfaceInfo {
	return &InterfaceInfo{}
}

func (p *InterfaceInfo) GetIndex() int32 {
	return p.Index
}

func (p *InterfaceInfo) GetDescr() string {
	return p.Descr
}

func (p *InterfaceInfo) GetType() int32 {
	return p.Type
}

func (p *InterfaceInfo) GetStatus() int32 {
	return p.Status
}

func (p *InterfaceInfo) GetSpeed() int64 {
	return p.Speed
}

func (p *InterfaceInfo) GetMtu() int32 {
	return p.Mtu
}

func (p *InterfaceInfo) GetPhysaddress() string {
	return p.Physaddress
}
func (p *InterfaceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InterfaceInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *InterfaceInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Descr = v
	}
	return nil
}

func (p *InterfaceInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *InterfaceInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *InterfaceInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Speed = v
	}
	return nil
}

func (p *InterfaceInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Mtu = v
	}
	return nil
}

func (p *InterfaceInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Physaddress = v
	}
	return nil
}

func (p *InterfaceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InterfaceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InterfaceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("descr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:descr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Descr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.descr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:descr: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("speed", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:speed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Speed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.speed (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:speed: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtu", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mtu: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Mtu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mtu (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mtu: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("physaddress", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:physaddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.Physaddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.physaddress (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:physaddress: ", p), err)
	}
	return err
}

func (p *InterfaceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InterfaceInfo(%+v)", *p)
}

// Attributes:
//  - Ifindex
//  - Destination
//  - Gateway
//  - Genmask
//  - Type
//  - Proto
type RouteInfo struct {
	Ifindex     int32   `thrift:"ifindex,1" json:"ifindex"`
	Destination *IpAddr `thrift:"destination,2" json:"destination"`
	Gateway     *IpAddr `thrift:"gateway,3" json:"gateway"`
	Genmask     *IpAddr `thrift:"genmask,4" json:"genmask"`
	Type        int32   `thrift:"type,5" json:"type"`
	Proto       int32   `thrift:"proto,6" json:"proto"`
}

func NewRouteInfo() *RouteInfo {
	return &RouteInfo{}
}

func (p *RouteInfo) GetIfindex() int32 {
	return p.Ifindex
}

var RouteInfo_Destination_DEFAULT *IpAddr

func (p *RouteInfo) GetDestination() *IpAddr {
	if !p.IsSetDestination() {
		return RouteInfo_Destination_DEFAULT
	}
	return p.Destination
}

var RouteInfo_Gateway_DEFAULT *IpAddr

func (p *RouteInfo) GetGateway() *IpAddr {
	if !p.IsSetGateway() {
		return RouteInfo_Gateway_DEFAULT
	}
	return p.Gateway
}

var RouteInfo_Genmask_DEFAULT *IpAddr

func (p *RouteInfo) GetGenmask() *IpAddr {
	if !p.IsSetGenmask() {
		return RouteInfo_Genmask_DEFAULT
	}
	return p.Genmask
}

func (p *RouteInfo) GetType() int32 {
	return p.Type
}

func (p *RouteInfo) GetProto() int32 {
	return p.Proto
}
func (p *RouteInfo) IsSetDestination() bool {
	return p.Destination != nil
}

func (p *RouteInfo) IsSetGateway() bool {
	return p.Gateway != nil
}

func (p *RouteInfo) IsSetGenmask() bool {
	return p.Genmask != nil
}

func (p *RouteInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RouteInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ifindex = v
	}
	return nil
}

func (p *RouteInfo) readField2(iprot thrift.TProtocol) error {
	p.Destination = &IpAddr{}
	if err := p.Destination.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Destination), err)
	}
	return nil
}

func (p *RouteInfo) readField3(iprot thrift.TProtocol) error {
	p.Gateway = &IpAddr{}
	if err := p.Gateway.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gateway), err)
	}
	return nil
}

func (p *RouteInfo) readField4(iprot thrift.TProtocol) error {
	p.Genmask = &IpAddr{}
	if err := p.Genmask.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Genmask), err)
	}
	return nil
}

func (p *RouteInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *RouteInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Proto = v
	}
	return nil
}

func (p *RouteInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RouteInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RouteInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ifindex", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ifindex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Ifindex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ifindex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ifindex: ", p), err)
	}
	return err
}

func (p *RouteInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destination", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destination: ", p), err)
	}
	if err := p.Destination.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Destination), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destination: ", p), err)
	}
	return err
}

func (p *RouteInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gateway", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gateway: ", p), err)
	}
	if err := p.Gateway.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gateway), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gateway: ", p), err)
	}
	return err
}

func (p *RouteInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("genmask", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:genmask: ", p), err)
	}
	if err := p.Genmask.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Genmask), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:genmask: ", p), err)
	}
	return err
}

func (p *RouteInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err)
	}
	return err
}

func (p *RouteInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("proto", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:proto: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Proto)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.proto (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:proto: ", p), err)
	}
	return err
}

func (p *RouteInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RouteInfo(%+v)", *p)
}

// Attributes:
//  - Load
//  - Usercpu
//  - Syscpu
//  - Idlecpu
//  - Totalmem
//  - Freemem
//  - Buffer
//  - Cache
//  - Availmem
type SysInfo struct {
	Load     int32 `thrift:"load,1" json:"load"`
	Usercpu  int32 `thrift:"usercpu,2" json:"usercpu"`
	Syscpu   int32 `thrift:"syscpu,3" json:"syscpu"`
	Idlecpu  int32 `thrift:"idlecpu,4" json:"idlecpu"`
	Totalmem int32 `thrift:"totalmem,5" json:"totalmem"`
	Freemem  int32 `thrift:"freemem,6" json:"freemem"`
	Buffer   int32 `thrift:"buffer,7" json:"buffer"`
	Cache    int32 `thrift:"cache,8" json:"cache"`
	Availmem int32 `thrift:"availmem,9" json:"availmem"`
}

func NewSysInfo() *SysInfo {
	return &SysInfo{}
}

func (p *SysInfo) GetLoad() int32 {
	return p.Load
}

func (p *SysInfo) GetUsercpu() int32 {
	return p.Usercpu
}

func (p *SysInfo) GetSyscpu() int32 {
	return p.Syscpu
}

func (p *SysInfo) GetIdlecpu() int32 {
	return p.Idlecpu
}

func (p *SysInfo) GetTotalmem() int32 {
	return p.Totalmem
}

func (p *SysInfo) GetFreemem() int32 {
	return p.Freemem
}

func (p *SysInfo) GetBuffer() int32 {
	return p.Buffer
}

func (p *SysInfo) GetCache() int32 {
	return p.Cache
}

func (p *SysInfo) GetAvailmem() int32 {
	return p.Availmem
}
func (p *SysInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SysInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Load = v
	}
	return nil
}

func (p *SysInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Usercpu = v
	}
	return nil
}

func (p *SysInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Syscpu = v
	}
	return nil
}

func (p *SysInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Idlecpu = v
	}
	return nil
}

func (p *SysInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Totalmem = v
	}
	return nil
}

func (p *SysInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Freemem = v
	}
	return nil
}

func (p *SysInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Buffer = v
	}
	return nil
}

func (p *SysInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Cache = v
	}
	return nil
}

func (p *SysInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Availmem = v
	}
	return nil
}

func (p *SysInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SysInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SysInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("load", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:load: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Load)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.load (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:load: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usercpu", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usercpu: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Usercpu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usercpu (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usercpu: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syscpu", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syscpu: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Syscpu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syscpu (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syscpu: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idlecpu", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:idlecpu: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Idlecpu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idlecpu (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:idlecpu: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalmem", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalmem: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Totalmem)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalmem (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalmem: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freemem", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:freemem: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Freemem)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.freemem (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:freemem: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buffer", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:buffer: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Buffer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buffer (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:buffer: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cache", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cache: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cache)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cache (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cache: ", p), err)
	}
	return err
}

func (p *SysInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("availmem", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:availmem: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Availmem)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.availmem (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:availmem: ", p), err)
	}
	return err
}

func (p *SysInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SysInfo(%+v)", *p)
}

// Attributes:
//  - Name
//  - Existflag
//  - Pid
//  - Cputime
//  - Usedmem
type ProcessInfo struct {
	Name      string `thrift:"name,1" json:"name"`
	Existflag bool   `thrift:"existflag,2" json:"existflag"`
	Pid       int32  `thrift:"pid,3" json:"pid"`
	Cputime   int32  `thrift:"cputime,4" json:"cputime"`
	Usedmem   int32  `thrift:"usedmem,5" json:"usedmem"`
}

func NewProcessInfo() *ProcessInfo {
	return &ProcessInfo{}
}

func (p *ProcessInfo) GetName() string {
	return p.Name
}

func (p *ProcessInfo) GetExistflag() bool {
	return p.Existflag
}

func (p *ProcessInfo) GetPid() int32 {
	return p.Pid
}

func (p *ProcessInfo) GetCputime() int32 {
	return p.Cputime
}

func (p *ProcessInfo) GetUsedmem() int32 {
	return p.Usedmem
}
func (p *ProcessInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProcessInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ProcessInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Existflag = v
	}
	return nil
}

func (p *ProcessInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pid = v
	}
	return nil
}

func (p *ProcessInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Cputime = v
	}
	return nil
}

func (p *ProcessInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Usedmem = v
	}
	return nil
}

func (p *ProcessInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcessInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProcessInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ProcessInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("existflag", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existflag: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Existflag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.existflag (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existflag: ", p), err)
	}
	return err
}

func (p *ProcessInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pid", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pid: ", p), err)
	}
	return err
}

func (p *ProcessInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cputime", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cputime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cputime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cputime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cputime: ", p), err)
	}
	return err
}

func (p *ProcessInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usedmem", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:usedmem: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Usedmem)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usedmem (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:usedmem: ", p), err)
	}
	return err
}

func (p *ProcessInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessInfo(%+v)", *p)
}
