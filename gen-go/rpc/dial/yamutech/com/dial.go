// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Dial interface {
	// Parameters:
	//  - CmdType
	SystemCommand(cmdType SysCommand) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - PolicyName
	AddHealthGroup(groupName string, policyName string) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - PolicyName
	DelHealthGroup(groupName string, policyName string) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - Records
	AddHealthRecord(groupName string, records []*DialRecord) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - Records
	DelHealthRecord(groupName string, records []*DialRecord) (r RetCode, err error)
	// Parameters:
	//  - Policy
	AddHealthPolicy(policy *HealthPolicyInfo) (r RetCode, err error)
	// Parameters:
	//  - Policy
	ModHealthPolicy(policy *HealthPolicyInfo) (r RetCode, err error)
	// Parameters:
	//  - Policy
	DelHealthPolicy(policy *HealthPolicyInfo) (r RetCode, err error)
	// Parameters:
	//  - Rid
	//  - IP
	//  - Typ
	AddDialServer(rid ObjectId, ip *IpAddr, typ DialServerType) (r RetCode, err error)
	// Parameters:
	//  - Rid
	DelDialServer(rid ObjectId) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - PolicyName
	AddNginxGroup(groupName string, policyName string) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - PolicyName
	DelNginxGroup(groupName string, policyName string) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - Servers
	AddNginxServer(groupName string, servers []*DialNginxServer) (r RetCode, err error)
	// Parameters:
	//  - GroupName
	//  - Servers
	DelNginxServer(groupName string, servers []*DialNginxServer) (r RetCode, err error)
	HeartBeat() (r *HeartBeatState, err error)
	// Parameters:
	//  - Enable
	SetServerState(enable bool) (r RetCode, err error)
	// Parameters:
	//  - Snmp
	AddSnmpGroupInfo(snmp *SnmpGroupInfo) (r RetCode, err error)
	// Parameters:
	//  - Snmp
	DelSnmpGroupInfo(snmp string) (r RetCode, err error)
	// Parameters:
	//  - Snmp
	//  - Processname
	AddSnmpProcessInfo(snmp string, processname string) (r RetCode, err error)
	// Parameters:
	//  - Snmp
	//  - Processname
	DelSnmpProcessInfo(snmp string, processname string) (r RetCode, err error)
	// Parameters:
	//  - Ipsec
	//  - Interval
	AddIpSec(ipsec *SysIpSec, interval int32) (r RetCode, err error)
	// Parameters:
	//  - Ipsecid
	DelIpSec(ipsecid string) (r RetCode, err error)
	// Parameters:
	//  - Dc
	AddDcInfo(dc *DcInfo) (r RetCode, err error)
	// Parameters:
	//  - ID
	DelDcInfo(id string) (r RetCode, err error)
}

type DialClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDialClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DialClient {
	return &DialClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDialClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DialClient {
	return &DialClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - CmdType
func (p *DialClient) SystemCommand(cmdType SysCommand) (r RetCode, err error) {
	if err = p.sendSystemCommand(cmdType); err != nil {
		return
	}
	return p.recvSystemCommand()
}

func (p *DialClient) sendSystemCommand(cmdType SysCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("systemCommand", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialSystemCommandArgs{
		CmdType: cmdType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvSystemCommand() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "systemCommand" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "systemCommand failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "systemCommand failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "systemCommand failed: invalid message type")
		return
	}
	result := DialSystemCommandResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - PolicyName
func (p *DialClient) AddHealthGroup(groupName string, policyName string) (r RetCode, err error) {
	if err = p.sendAddHealthGroup(groupName, policyName); err != nil {
		return
	}
	return p.recvAddHealthGroup()
}

func (p *DialClient) sendAddHealthGroup(groupName string, policyName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addHealthGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddHealthGroupArgs{
		GroupName:  groupName,
		PolicyName: policyName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddHealthGroup() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addHealthGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addHealthGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addHealthGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHealthGroup failed: invalid message type")
		return
	}
	result := DialAddHealthGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - PolicyName
func (p *DialClient) DelHealthGroup(groupName string, policyName string) (r RetCode, err error) {
	if err = p.sendDelHealthGroup(groupName, policyName); err != nil {
		return
	}
	return p.recvDelHealthGroup()
}

func (p *DialClient) sendDelHealthGroup(groupName string, policyName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delHealthGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelHealthGroupArgs{
		GroupName:  groupName,
		PolicyName: policyName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelHealthGroup() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delHealthGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delHealthGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delHealthGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delHealthGroup failed: invalid message type")
		return
	}
	result := DialDelHealthGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - Records
func (p *DialClient) AddHealthRecord(groupName string, records []*DialRecord) (r RetCode, err error) {
	if err = p.sendAddHealthRecord(groupName, records); err != nil {
		return
	}
	return p.recvAddHealthRecord()
}

func (p *DialClient) sendAddHealthRecord(groupName string, records []*DialRecord) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addHealthRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddHealthRecordArgs{
		GroupName: groupName,
		Records:   records,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddHealthRecord() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addHealthRecord" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addHealthRecord failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addHealthRecord failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHealthRecord failed: invalid message type")
		return
	}
	result := DialAddHealthRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - Records
func (p *DialClient) DelHealthRecord(groupName string, records []*DialRecord) (r RetCode, err error) {
	if err = p.sendDelHealthRecord(groupName, records); err != nil {
		return
	}
	return p.recvDelHealthRecord()
}

func (p *DialClient) sendDelHealthRecord(groupName string, records []*DialRecord) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delHealthRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelHealthRecordArgs{
		GroupName: groupName,
		Records:   records,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelHealthRecord() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delHealthRecord" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delHealthRecord failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delHealthRecord failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delHealthRecord failed: invalid message type")
		return
	}
	result := DialDelHealthRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Policy
func (p *DialClient) AddHealthPolicy(policy *HealthPolicyInfo) (r RetCode, err error) {
	if err = p.sendAddHealthPolicy(policy); err != nil {
		return
	}
	return p.recvAddHealthPolicy()
}

func (p *DialClient) sendAddHealthPolicy(policy *HealthPolicyInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addHealthPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddHealthPolicyArgs{
		Policy: policy,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddHealthPolicy() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addHealthPolicy" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addHealthPolicy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addHealthPolicy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHealthPolicy failed: invalid message type")
		return
	}
	result := DialAddHealthPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Policy
func (p *DialClient) ModHealthPolicy(policy *HealthPolicyInfo) (r RetCode, err error) {
	if err = p.sendModHealthPolicy(policy); err != nil {
		return
	}
	return p.recvModHealthPolicy()
}

func (p *DialClient) sendModHealthPolicy(policy *HealthPolicyInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("modHealthPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialModHealthPolicyArgs{
		Policy: policy,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvModHealthPolicy() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "modHealthPolicy" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "modHealthPolicy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "modHealthPolicy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "modHealthPolicy failed: invalid message type")
		return
	}
	result := DialModHealthPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Policy
func (p *DialClient) DelHealthPolicy(policy *HealthPolicyInfo) (r RetCode, err error) {
	if err = p.sendDelHealthPolicy(policy); err != nil {
		return
	}
	return p.recvDelHealthPolicy()
}

func (p *DialClient) sendDelHealthPolicy(policy *HealthPolicyInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delHealthPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelHealthPolicyArgs{
		Policy: policy,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelHealthPolicy() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delHealthPolicy" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delHealthPolicy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delHealthPolicy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delHealthPolicy failed: invalid message type")
		return
	}
	result := DialDelHealthPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rid
//  - IP
//  - Typ
func (p *DialClient) AddDialServer(rid ObjectId, ip *IpAddr, typ DialServerType) (r RetCode, err error) {
	if err = p.sendAddDialServer(rid, ip, typ); err != nil {
		return
	}
	return p.recvAddDialServer()
}

func (p *DialClient) sendAddDialServer(rid ObjectId, ip *IpAddr, typ DialServerType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addDialServer", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddDialServerArgs{
		Rid: rid,
		IP:  ip,
		Typ: typ,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddDialServer() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addDialServer" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addDialServer failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addDialServer failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addDialServer failed: invalid message type")
		return
	}
	result := DialAddDialServerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Rid
func (p *DialClient) DelDialServer(rid ObjectId) (r RetCode, err error) {
	if err = p.sendDelDialServer(rid); err != nil {
		return
	}
	return p.recvDelDialServer()
}

func (p *DialClient) sendDelDialServer(rid ObjectId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delDialServer", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelDialServerArgs{
		Rid: rid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelDialServer() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delDialServer" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delDialServer failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delDialServer failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delDialServer failed: invalid message type")
		return
	}
	result := DialDelDialServerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - PolicyName
func (p *DialClient) AddNginxGroup(groupName string, policyName string) (r RetCode, err error) {
	if err = p.sendAddNginxGroup(groupName, policyName); err != nil {
		return
	}
	return p.recvAddNginxGroup()
}

func (p *DialClient) sendAddNginxGroup(groupName string, policyName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addNginxGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddNginxGroupArgs{
		GroupName:  groupName,
		PolicyName: policyName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddNginxGroup() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addNginxGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addNginxGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addNginxGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addNginxGroup failed: invalid message type")
		return
	}
	result := DialAddNginxGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - PolicyName
func (p *DialClient) DelNginxGroup(groupName string, policyName string) (r RetCode, err error) {
	if err = p.sendDelNginxGroup(groupName, policyName); err != nil {
		return
	}
	return p.recvDelNginxGroup()
}

func (p *DialClient) sendDelNginxGroup(groupName string, policyName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delNginxGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelNginxGroupArgs{
		GroupName:  groupName,
		PolicyName: policyName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelNginxGroup() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delNginxGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delNginxGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delNginxGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delNginxGroup failed: invalid message type")
		return
	}
	result := DialDelNginxGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - Servers
func (p *DialClient) AddNginxServer(groupName string, servers []*DialNginxServer) (r RetCode, err error) {
	if err = p.sendAddNginxServer(groupName, servers); err != nil {
		return
	}
	return p.recvAddNginxServer()
}

func (p *DialClient) sendAddNginxServer(groupName string, servers []*DialNginxServer) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addNginxServer", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddNginxServerArgs{
		GroupName: groupName,
		Servers:   servers,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddNginxServer() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addNginxServer" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addNginxServer failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addNginxServer failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addNginxServer failed: invalid message type")
		return
	}
	result := DialAddNginxServerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupName
//  - Servers
func (p *DialClient) DelNginxServer(groupName string, servers []*DialNginxServer) (r RetCode, err error) {
	if err = p.sendDelNginxServer(groupName, servers); err != nil {
		return
	}
	return p.recvDelNginxServer()
}

func (p *DialClient) sendDelNginxServer(groupName string, servers []*DialNginxServer) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delNginxServer", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelNginxServerArgs{
		GroupName: groupName,
		Servers:   servers,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelNginxServer() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delNginxServer" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delNginxServer failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delNginxServer failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delNginxServer failed: invalid message type")
		return
	}
	result := DialDelNginxServerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

func (p *DialClient) HeartBeat() (r *HeartBeatState, err error) {
	if err = p.sendHeartBeat(); err != nil {
		return
	}
	return p.recvHeartBeat()
}

func (p *DialClient) sendHeartBeat() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("heartBeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialHeartBeatArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvHeartBeat() (value *HeartBeatState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "heartBeat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "heartBeat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "heartBeat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartBeat failed: invalid message type")
		return
	}
	result := DialHeartBeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Enable
func (p *DialClient) SetServerState(enable bool) (r RetCode, err error) {
	if err = p.sendSetServerState(enable); err != nil {
		return
	}
	return p.recvSetServerState()
}

func (p *DialClient) sendSetServerState(enable bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setServerState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialSetServerStateArgs{
		Enable: enable,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvSetServerState() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setServerState" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setServerState failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setServerState failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error152 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error153 error
		error153, err = error152.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error153
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setServerState failed: invalid message type")
		return
	}
	result := DialSetServerStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Snmp
func (p *DialClient) AddSnmpGroupInfo(snmp *SnmpGroupInfo) (r RetCode, err error) {
	if err = p.sendAddSnmpGroupInfo(snmp); err != nil {
		return
	}
	return p.recvAddSnmpGroupInfo()
}

func (p *DialClient) sendAddSnmpGroupInfo(snmp *SnmpGroupInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addSnmpGroupInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddSnmpGroupInfoArgs{
		Snmp: snmp,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddSnmpGroupInfo() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addSnmpGroupInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSnmpGroupInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSnmpGroupInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSnmpGroupInfo failed: invalid message type")
		return
	}
	result := DialAddSnmpGroupInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Snmp
func (p *DialClient) DelSnmpGroupInfo(snmp string) (r RetCode, err error) {
	if err = p.sendDelSnmpGroupInfo(snmp); err != nil {
		return
	}
	return p.recvDelSnmpGroupInfo()
}

func (p *DialClient) sendDelSnmpGroupInfo(snmp string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delSnmpGroupInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelSnmpGroupInfoArgs{
		Snmp: snmp,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelSnmpGroupInfo() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delSnmpGroupInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delSnmpGroupInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delSnmpGroupInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error156 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error157 error
		error157, err = error156.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error157
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delSnmpGroupInfo failed: invalid message type")
		return
	}
	result := DialDelSnmpGroupInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Snmp
//  - Processname
func (p *DialClient) AddSnmpProcessInfo(snmp string, processname string) (r RetCode, err error) {
	if err = p.sendAddSnmpProcessInfo(snmp, processname); err != nil {
		return
	}
	return p.recvAddSnmpProcessInfo()
}

func (p *DialClient) sendAddSnmpProcessInfo(snmp string, processname string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addSnmpProcessInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddSnmpProcessInfoArgs{
		Snmp:        snmp,
		Processname: processname,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddSnmpProcessInfo() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addSnmpProcessInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSnmpProcessInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSnmpProcessInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSnmpProcessInfo failed: invalid message type")
		return
	}
	result := DialAddSnmpProcessInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Snmp
//  - Processname
func (p *DialClient) DelSnmpProcessInfo(snmp string, processname string) (r RetCode, err error) {
	if err = p.sendDelSnmpProcessInfo(snmp, processname); err != nil {
		return
	}
	return p.recvDelSnmpProcessInfo()
}

func (p *DialClient) sendDelSnmpProcessInfo(snmp string, processname string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delSnmpProcessInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelSnmpProcessInfoArgs{
		Snmp:        snmp,
		Processname: processname,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelSnmpProcessInfo() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delSnmpProcessInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delSnmpProcessInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delSnmpProcessInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delSnmpProcessInfo failed: invalid message type")
		return
	}
	result := DialDelSnmpProcessInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ipsec
//  - Interval
func (p *DialClient) AddIpSec(ipsec *SysIpSec, interval int32) (r RetCode, err error) {
	if err = p.sendAddIpSec(ipsec, interval); err != nil {
		return
	}
	return p.recvAddIpSec()
}

func (p *DialClient) sendAddIpSec(ipsec *SysIpSec, interval int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addIpSec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddIpSecArgs{
		Ipsec:    ipsec,
		Interval: interval,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddIpSec() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addIpSec" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addIpSec failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addIpSec failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addIpSec failed: invalid message type")
		return
	}
	result := DialAddIpSecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ipsecid
func (p *DialClient) DelIpSec(ipsecid string) (r RetCode, err error) {
	if err = p.sendDelIpSec(ipsecid); err != nil {
		return
	}
	return p.recvDelIpSec()
}

func (p *DialClient) sendDelIpSec(ipsecid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delIpSec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelIpSecArgs{
		Ipsecid: ipsecid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelIpSec() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delIpSec" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delIpSec failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delIpSec failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error164 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error165 error
		error165, err = error164.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error165
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delIpSec failed: invalid message type")
		return
	}
	result := DialDelIpSecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dc
func (p *DialClient) AddDcInfo(dc *DcInfo) (r RetCode, err error) {
	if err = p.sendAddDcInfo(dc); err != nil {
		return
	}
	return p.recvAddDcInfo()
}

func (p *DialClient) sendAddDcInfo(dc *DcInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addDcInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialAddDcInfoArgs{
		Dc: dc,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvAddDcInfo() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addDcInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addDcInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addDcInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addDcInfo failed: invalid message type")
		return
	}
	result := DialAddDcInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *DialClient) DelDcInfo(id string) (r RetCode, err error) {
	if err = p.sendDelDcInfo(id); err != nil {
		return
	}
	return p.recvDelDcInfo()
}

func (p *DialClient) sendDelDcInfo(id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delDcInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DialDelDcInfoArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DialClient) recvDelDcInfo() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delDcInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delDcInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delDcInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delDcInfo failed: invalid message type")
		return
	}
	result := DialDelDcInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type DialProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Dial
}

func (p *DialProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DialProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DialProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDialProcessor(handler Dial) *DialProcessor {

	self170 := &DialProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self170.processorMap["systemCommand"] = &dialProcessorSystemCommand{handler: handler}
	self170.processorMap["addHealthGroup"] = &dialProcessorAddHealthGroup{handler: handler}
	self170.processorMap["delHealthGroup"] = &dialProcessorDelHealthGroup{handler: handler}
	self170.processorMap["addHealthRecord"] = &dialProcessorAddHealthRecord{handler: handler}
	self170.processorMap["delHealthRecord"] = &dialProcessorDelHealthRecord{handler: handler}
	self170.processorMap["addHealthPolicy"] = &dialProcessorAddHealthPolicy{handler: handler}
	self170.processorMap["modHealthPolicy"] = &dialProcessorModHealthPolicy{handler: handler}
	self170.processorMap["delHealthPolicy"] = &dialProcessorDelHealthPolicy{handler: handler}
	self170.processorMap["addDialServer"] = &dialProcessorAddDialServer{handler: handler}
	self170.processorMap["delDialServer"] = &dialProcessorDelDialServer{handler: handler}
	self170.processorMap["addNginxGroup"] = &dialProcessorAddNginxGroup{handler: handler}
	self170.processorMap["delNginxGroup"] = &dialProcessorDelNginxGroup{handler: handler}
	self170.processorMap["addNginxServer"] = &dialProcessorAddNginxServer{handler: handler}
	self170.processorMap["delNginxServer"] = &dialProcessorDelNginxServer{handler: handler}
	self170.processorMap["heartBeat"] = &dialProcessorHeartBeat{handler: handler}
	self170.processorMap["setServerState"] = &dialProcessorSetServerState{handler: handler}
	self170.processorMap["addSnmpGroupInfo"] = &dialProcessorAddSnmpGroupInfo{handler: handler}
	self170.processorMap["delSnmpGroupInfo"] = &dialProcessorDelSnmpGroupInfo{handler: handler}
	self170.processorMap["addSnmpProcessInfo"] = &dialProcessorAddSnmpProcessInfo{handler: handler}
	self170.processorMap["delSnmpProcessInfo"] = &dialProcessorDelSnmpProcessInfo{handler: handler}
	self170.processorMap["addIpSec"] = &dialProcessorAddIpSec{handler: handler}
	self170.processorMap["delIpSec"] = &dialProcessorDelIpSec{handler: handler}
	self170.processorMap["addDcInfo"] = &dialProcessorAddDcInfo{handler: handler}
	self170.processorMap["delDcInfo"] = &dialProcessorDelDcInfo{handler: handler}
	return self170
}

func (p *DialProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x171 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x171.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x171

}

type dialProcessorSystemCommand struct {
	handler Dial
}

func (p *dialProcessorSystemCommand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialSystemCommandArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("systemCommand", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialSystemCommandResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.SystemCommand(args.CmdType); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing systemCommand: "+err2.Error())
			oprot.WriteMessageBegin("systemCommand", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("systemCommand", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddHealthGroup struct {
	handler Dial
}

func (p *dialProcessorAddHealthGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddHealthGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addHealthGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddHealthGroupResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddHealthGroup(args.GroupName, args.PolicyName); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHealthGroup: "+err2.Error())
			oprot.WriteMessageBegin("addHealthGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addHealthGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelHealthGroup struct {
	handler Dial
}

func (p *dialProcessorDelHealthGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelHealthGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delHealthGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelHealthGroupResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelHealthGroup(args.GroupName, args.PolicyName); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delHealthGroup: "+err2.Error())
			oprot.WriteMessageBegin("delHealthGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delHealthGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddHealthRecord struct {
	handler Dial
}

func (p *dialProcessorAddHealthRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddHealthRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addHealthRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddHealthRecordResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddHealthRecord(args.GroupName, args.Records); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHealthRecord: "+err2.Error())
			oprot.WriteMessageBegin("addHealthRecord", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addHealthRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelHealthRecord struct {
	handler Dial
}

func (p *dialProcessorDelHealthRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelHealthRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delHealthRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelHealthRecordResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelHealthRecord(args.GroupName, args.Records); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delHealthRecord: "+err2.Error())
			oprot.WriteMessageBegin("delHealthRecord", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delHealthRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddHealthPolicy struct {
	handler Dial
}

func (p *dialProcessorAddHealthPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddHealthPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addHealthPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddHealthPolicyResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddHealthPolicy(args.Policy); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHealthPolicy: "+err2.Error())
			oprot.WriteMessageBegin("addHealthPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addHealthPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorModHealthPolicy struct {
	handler Dial
}

func (p *dialProcessorModHealthPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialModHealthPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("modHealthPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialModHealthPolicyResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.ModHealthPolicy(args.Policy); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modHealthPolicy: "+err2.Error())
			oprot.WriteMessageBegin("modHealthPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("modHealthPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelHealthPolicy struct {
	handler Dial
}

func (p *dialProcessorDelHealthPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelHealthPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delHealthPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelHealthPolicyResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelHealthPolicy(args.Policy); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delHealthPolicy: "+err2.Error())
			oprot.WriteMessageBegin("delHealthPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delHealthPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddDialServer struct {
	handler Dial
}

func (p *dialProcessorAddDialServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddDialServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addDialServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddDialServerResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddDialServer(args.Rid, args.IP, args.Typ); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addDialServer: "+err2.Error())
			oprot.WriteMessageBegin("addDialServer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addDialServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelDialServer struct {
	handler Dial
}

func (p *dialProcessorDelDialServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelDialServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delDialServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelDialServerResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelDialServer(args.Rid); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delDialServer: "+err2.Error())
			oprot.WriteMessageBegin("delDialServer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delDialServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddNginxGroup struct {
	handler Dial
}

func (p *dialProcessorAddNginxGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddNginxGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addNginxGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddNginxGroupResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddNginxGroup(args.GroupName, args.PolicyName); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addNginxGroup: "+err2.Error())
			oprot.WriteMessageBegin("addNginxGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addNginxGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelNginxGroup struct {
	handler Dial
}

func (p *dialProcessorDelNginxGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelNginxGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delNginxGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelNginxGroupResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelNginxGroup(args.GroupName, args.PolicyName); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delNginxGroup: "+err2.Error())
			oprot.WriteMessageBegin("delNginxGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delNginxGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddNginxServer struct {
	handler Dial
}

func (p *dialProcessorAddNginxServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddNginxServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addNginxServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddNginxServerResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddNginxServer(args.GroupName, args.Servers); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addNginxServer: "+err2.Error())
			oprot.WriteMessageBegin("addNginxServer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addNginxServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelNginxServer struct {
	handler Dial
}

func (p *dialProcessorDelNginxServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelNginxServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delNginxServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelNginxServerResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelNginxServer(args.GroupName, args.Servers); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delNginxServer: "+err2.Error())
			oprot.WriteMessageBegin("delNginxServer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delNginxServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorHeartBeat struct {
	handler Dial
}

func (p *dialProcessorHeartBeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialHeartBeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("heartBeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialHeartBeatResult{}
	var retval *HeartBeatState
	var err2 error
	if retval, err2 = p.handler.HeartBeat(); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: "+err2.Error())
			oprot.WriteMessageBegin("heartBeat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("heartBeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorSetServerState struct {
	handler Dial
}

func (p *dialProcessorSetServerState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialSetServerStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setServerState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialSetServerStateResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.SetServerState(args.Enable); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setServerState: "+err2.Error())
			oprot.WriteMessageBegin("setServerState", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setServerState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddSnmpGroupInfo struct {
	handler Dial
}

func (p *dialProcessorAddSnmpGroupInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddSnmpGroupInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSnmpGroupInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddSnmpGroupInfoResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddSnmpGroupInfo(args.Snmp); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSnmpGroupInfo: "+err2.Error())
			oprot.WriteMessageBegin("addSnmpGroupInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addSnmpGroupInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelSnmpGroupInfo struct {
	handler Dial
}

func (p *dialProcessorDelSnmpGroupInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelSnmpGroupInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delSnmpGroupInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelSnmpGroupInfoResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelSnmpGroupInfo(args.Snmp); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delSnmpGroupInfo: "+err2.Error())
			oprot.WriteMessageBegin("delSnmpGroupInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delSnmpGroupInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddSnmpProcessInfo struct {
	handler Dial
}

func (p *dialProcessorAddSnmpProcessInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddSnmpProcessInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSnmpProcessInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddSnmpProcessInfoResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddSnmpProcessInfo(args.Snmp, args.Processname); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSnmpProcessInfo: "+err2.Error())
			oprot.WriteMessageBegin("addSnmpProcessInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addSnmpProcessInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelSnmpProcessInfo struct {
	handler Dial
}

func (p *dialProcessorDelSnmpProcessInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelSnmpProcessInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delSnmpProcessInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelSnmpProcessInfoResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelSnmpProcessInfo(args.Snmp, args.Processname); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delSnmpProcessInfo: "+err2.Error())
			oprot.WriteMessageBegin("delSnmpProcessInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delSnmpProcessInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddIpSec struct {
	handler Dial
}

func (p *dialProcessorAddIpSec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddIpSecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addIpSec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddIpSecResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddIpSec(args.Ipsec, args.Interval); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addIpSec: "+err2.Error())
			oprot.WriteMessageBegin("addIpSec", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addIpSec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelIpSec struct {
	handler Dial
}

func (p *dialProcessorDelIpSec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelIpSecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delIpSec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelIpSecResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelIpSec(args.Ipsecid); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delIpSec: "+err2.Error())
			oprot.WriteMessageBegin("delIpSec", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delIpSec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorAddDcInfo struct {
	handler Dial
}

func (p *dialProcessorAddDcInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialAddDcInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addDcInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialAddDcInfoResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddDcInfo(args.Dc); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addDcInfo: "+err2.Error())
			oprot.WriteMessageBegin("addDcInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addDcInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dialProcessorDelDcInfo struct {
	handler Dial
}

func (p *dialProcessorDelDcInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DialDelDcInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delDcInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DialDelDcInfoResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.DelDcInfo(args.ID); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delDcInfo: "+err2.Error())
			oprot.WriteMessageBegin("delDcInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delDcInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CmdType
type DialSystemCommandArgs struct {
	CmdType SysCommand `thrift:"cmdType,1" json:"cmdType"`
}

func NewDialSystemCommandArgs() *DialSystemCommandArgs {
	return &DialSystemCommandArgs{}
}

func (p *DialSystemCommandArgs) GetCmdType() SysCommand {
	return p.CmdType
}
func (p *DialSystemCommandArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialSystemCommandArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SysCommand(v)
		p.CmdType = temp
	}
	return nil
}

func (p *DialSystemCommandArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("systemCommand_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialSystemCommandArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cmdType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cmdType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CmdType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cmdType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cmdType: ", p), err)
	}
	return err
}

func (p *DialSystemCommandArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialSystemCommandArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialSystemCommandResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialSystemCommandResult() *DialSystemCommandResult {
	return &DialSystemCommandResult{}
}

var DialSystemCommandResult_Success_DEFAULT RetCode

func (p *DialSystemCommandResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialSystemCommandResult_Success_DEFAULT
	}
	return *p.Success
}

var DialSystemCommandResult_Ex_DEFAULT *Xception

func (p *DialSystemCommandResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialSystemCommandResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialSystemCommandResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialSystemCommandResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialSystemCommandResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialSystemCommandResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialSystemCommandResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialSystemCommandResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("systemCommand_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialSystemCommandResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialSystemCommandResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialSystemCommandResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialSystemCommandResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - PolicyName
type DialAddHealthGroupArgs struct {
	GroupName  string `thrift:"groupName,1" json:"groupName"`
	PolicyName string `thrift:"policyName,2" json:"policyName"`
}

func NewDialAddHealthGroupArgs() *DialAddHealthGroupArgs {
	return &DialAddHealthGroupArgs{}
}

func (p *DialAddHealthGroupArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialAddHealthGroupArgs) GetPolicyName() string {
	return p.PolicyName
}
func (p *DialAddHealthGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddHealthGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialAddHealthGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *DialAddHealthGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addHealthGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddHealthGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialAddHealthGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policyName: ", p), err)
	}
	return err
}

func (p *DialAddHealthGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddHealthGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddHealthGroupResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddHealthGroupResult() *DialAddHealthGroupResult {
	return &DialAddHealthGroupResult{}
}

var DialAddHealthGroupResult_Success_DEFAULT RetCode

func (p *DialAddHealthGroupResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddHealthGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddHealthGroupResult_Ex_DEFAULT *Xception

func (p *DialAddHealthGroupResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddHealthGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddHealthGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddHealthGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddHealthGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddHealthGroupResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddHealthGroupResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddHealthGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addHealthGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddHealthGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddHealthGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddHealthGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddHealthGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - PolicyName
type DialDelHealthGroupArgs struct {
	GroupName  string `thrift:"groupName,1" json:"groupName"`
	PolicyName string `thrift:"policyName,2" json:"policyName"`
}

func NewDialDelHealthGroupArgs() *DialDelHealthGroupArgs {
	return &DialDelHealthGroupArgs{}
}

func (p *DialDelHealthGroupArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialDelHealthGroupArgs) GetPolicyName() string {
	return p.PolicyName
}
func (p *DialDelHealthGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelHealthGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialDelHealthGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *DialDelHealthGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delHealthGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelHealthGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialDelHealthGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policyName: ", p), err)
	}
	return err
}

func (p *DialDelHealthGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelHealthGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelHealthGroupResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelHealthGroupResult() *DialDelHealthGroupResult {
	return &DialDelHealthGroupResult{}
}

var DialDelHealthGroupResult_Success_DEFAULT RetCode

func (p *DialDelHealthGroupResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelHealthGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelHealthGroupResult_Ex_DEFAULT *Xception

func (p *DialDelHealthGroupResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelHealthGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelHealthGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelHealthGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelHealthGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelHealthGroupResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelHealthGroupResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelHealthGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delHealthGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelHealthGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelHealthGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelHealthGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelHealthGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - Records
type DialAddHealthRecordArgs struct {
	GroupName string        `thrift:"groupName,1" json:"groupName"`
	Records   []*DialRecord `thrift:"records,2" json:"records"`
}

func NewDialAddHealthRecordArgs() *DialAddHealthRecordArgs {
	return &DialAddHealthRecordArgs{}
}

func (p *DialAddHealthRecordArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialAddHealthRecordArgs) GetRecords() []*DialRecord {
	return p.Records
}
func (p *DialAddHealthRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddHealthRecordArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialAddHealthRecordArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DialRecord, 0, size)
	p.Records = tSlice
	for i := 0; i < size; i++ {
		_elem172 := &DialRecord{}
		if err := _elem172.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem172), err)
		}
		p.Records = append(p.Records, _elem172)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialAddHealthRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addHealthRecord_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddHealthRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialAddHealthRecordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("records", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:records: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Records {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:records: ", p), err)
	}
	return err
}

func (p *DialAddHealthRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddHealthRecordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddHealthRecordResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddHealthRecordResult() *DialAddHealthRecordResult {
	return &DialAddHealthRecordResult{}
}

var DialAddHealthRecordResult_Success_DEFAULT RetCode

func (p *DialAddHealthRecordResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddHealthRecordResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddHealthRecordResult_Ex_DEFAULT *Xception

func (p *DialAddHealthRecordResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddHealthRecordResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddHealthRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddHealthRecordResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddHealthRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddHealthRecordResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddHealthRecordResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddHealthRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addHealthRecord_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddHealthRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddHealthRecordResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddHealthRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddHealthRecordResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - Records
type DialDelHealthRecordArgs struct {
	GroupName string        `thrift:"groupName,1" json:"groupName"`
	Records   []*DialRecord `thrift:"records,2" json:"records"`
}

func NewDialDelHealthRecordArgs() *DialDelHealthRecordArgs {
	return &DialDelHealthRecordArgs{}
}

func (p *DialDelHealthRecordArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialDelHealthRecordArgs) GetRecords() []*DialRecord {
	return p.Records
}
func (p *DialDelHealthRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelHealthRecordArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialDelHealthRecordArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DialRecord, 0, size)
	p.Records = tSlice
	for i := 0; i < size; i++ {
		_elem173 := &DialRecord{}
		if err := _elem173.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem173), err)
		}
		p.Records = append(p.Records, _elem173)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialDelHealthRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delHealthRecord_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelHealthRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialDelHealthRecordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("records", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:records: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Records {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:records: ", p), err)
	}
	return err
}

func (p *DialDelHealthRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelHealthRecordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelHealthRecordResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelHealthRecordResult() *DialDelHealthRecordResult {
	return &DialDelHealthRecordResult{}
}

var DialDelHealthRecordResult_Success_DEFAULT RetCode

func (p *DialDelHealthRecordResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelHealthRecordResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelHealthRecordResult_Ex_DEFAULT *Xception

func (p *DialDelHealthRecordResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelHealthRecordResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelHealthRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelHealthRecordResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelHealthRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelHealthRecordResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelHealthRecordResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelHealthRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delHealthRecord_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelHealthRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelHealthRecordResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelHealthRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelHealthRecordResult(%+v)", *p)
}

// Attributes:
//  - Policy
type DialAddHealthPolicyArgs struct {
	Policy *HealthPolicyInfo `thrift:"policy,1" json:"policy"`
}

func NewDialAddHealthPolicyArgs() *DialAddHealthPolicyArgs {
	return &DialAddHealthPolicyArgs{}
}

var DialAddHealthPolicyArgs_Policy_DEFAULT *HealthPolicyInfo

func (p *DialAddHealthPolicyArgs) GetPolicy() *HealthPolicyInfo {
	if !p.IsSetPolicy() {
		return DialAddHealthPolicyArgs_Policy_DEFAULT
	}
	return p.Policy
}
func (p *DialAddHealthPolicyArgs) IsSetPolicy() bool {
	return p.Policy != nil
}

func (p *DialAddHealthPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddHealthPolicyArgs) readField1(iprot thrift.TProtocol) error {
	p.Policy = &HealthPolicyInfo{}
	if err := p.Policy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Policy), err)
	}
	return nil
}

func (p *DialAddHealthPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addHealthPolicy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddHealthPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:policy: ", p), err)
	}
	if err := p.Policy.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Policy), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:policy: ", p), err)
	}
	return err
}

func (p *DialAddHealthPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddHealthPolicyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddHealthPolicyResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddHealthPolicyResult() *DialAddHealthPolicyResult {
	return &DialAddHealthPolicyResult{}
}

var DialAddHealthPolicyResult_Success_DEFAULT RetCode

func (p *DialAddHealthPolicyResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddHealthPolicyResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddHealthPolicyResult_Ex_DEFAULT *Xception

func (p *DialAddHealthPolicyResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddHealthPolicyResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddHealthPolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddHealthPolicyResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddHealthPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddHealthPolicyResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddHealthPolicyResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddHealthPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addHealthPolicy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddHealthPolicyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddHealthPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddHealthPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddHealthPolicyResult(%+v)", *p)
}

// Attributes:
//  - Policy
type DialModHealthPolicyArgs struct {
	Policy *HealthPolicyInfo `thrift:"policy,1" json:"policy"`
}

func NewDialModHealthPolicyArgs() *DialModHealthPolicyArgs {
	return &DialModHealthPolicyArgs{}
}

var DialModHealthPolicyArgs_Policy_DEFAULT *HealthPolicyInfo

func (p *DialModHealthPolicyArgs) GetPolicy() *HealthPolicyInfo {
	if !p.IsSetPolicy() {
		return DialModHealthPolicyArgs_Policy_DEFAULT
	}
	return p.Policy
}
func (p *DialModHealthPolicyArgs) IsSetPolicy() bool {
	return p.Policy != nil
}

func (p *DialModHealthPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialModHealthPolicyArgs) readField1(iprot thrift.TProtocol) error {
	p.Policy = &HealthPolicyInfo{}
	if err := p.Policy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Policy), err)
	}
	return nil
}

func (p *DialModHealthPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("modHealthPolicy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialModHealthPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:policy: ", p), err)
	}
	if err := p.Policy.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Policy), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:policy: ", p), err)
	}
	return err
}

func (p *DialModHealthPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialModHealthPolicyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialModHealthPolicyResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialModHealthPolicyResult() *DialModHealthPolicyResult {
	return &DialModHealthPolicyResult{}
}

var DialModHealthPolicyResult_Success_DEFAULT RetCode

func (p *DialModHealthPolicyResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialModHealthPolicyResult_Success_DEFAULT
	}
	return *p.Success
}

var DialModHealthPolicyResult_Ex_DEFAULT *Xception

func (p *DialModHealthPolicyResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialModHealthPolicyResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialModHealthPolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialModHealthPolicyResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialModHealthPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialModHealthPolicyResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialModHealthPolicyResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialModHealthPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("modHealthPolicy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialModHealthPolicyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialModHealthPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialModHealthPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialModHealthPolicyResult(%+v)", *p)
}

// Attributes:
//  - Policy
type DialDelHealthPolicyArgs struct {
	Policy *HealthPolicyInfo `thrift:"policy,1" json:"policy"`
}

func NewDialDelHealthPolicyArgs() *DialDelHealthPolicyArgs {
	return &DialDelHealthPolicyArgs{}
}

var DialDelHealthPolicyArgs_Policy_DEFAULT *HealthPolicyInfo

func (p *DialDelHealthPolicyArgs) GetPolicy() *HealthPolicyInfo {
	if !p.IsSetPolicy() {
		return DialDelHealthPolicyArgs_Policy_DEFAULT
	}
	return p.Policy
}
func (p *DialDelHealthPolicyArgs) IsSetPolicy() bool {
	return p.Policy != nil
}

func (p *DialDelHealthPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelHealthPolicyArgs) readField1(iprot thrift.TProtocol) error {
	p.Policy = &HealthPolicyInfo{}
	if err := p.Policy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Policy), err)
	}
	return nil
}

func (p *DialDelHealthPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delHealthPolicy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelHealthPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:policy: ", p), err)
	}
	if err := p.Policy.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Policy), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:policy: ", p), err)
	}
	return err
}

func (p *DialDelHealthPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelHealthPolicyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelHealthPolicyResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelHealthPolicyResult() *DialDelHealthPolicyResult {
	return &DialDelHealthPolicyResult{}
}

var DialDelHealthPolicyResult_Success_DEFAULT RetCode

func (p *DialDelHealthPolicyResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelHealthPolicyResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelHealthPolicyResult_Ex_DEFAULT *Xception

func (p *DialDelHealthPolicyResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelHealthPolicyResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelHealthPolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelHealthPolicyResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelHealthPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelHealthPolicyResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelHealthPolicyResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelHealthPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delHealthPolicy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelHealthPolicyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelHealthPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelHealthPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelHealthPolicyResult(%+v)", *p)
}

// Attributes:
//  - Rid
//  - IP
//  - Typ
type DialAddDialServerArgs struct {
	Rid ObjectId       `thrift:"rid,1" json:"rid"`
	IP  *IpAddr        `thrift:"ip,2" json:"ip"`
	Typ DialServerType `thrift:"typ,3" json:"typ"`
}

func NewDialAddDialServerArgs() *DialAddDialServerArgs {
	return &DialAddDialServerArgs{}
}

func (p *DialAddDialServerArgs) GetRid() ObjectId {
	return p.Rid
}

var DialAddDialServerArgs_IP_DEFAULT *IpAddr

func (p *DialAddDialServerArgs) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return DialAddDialServerArgs_IP_DEFAULT
	}
	return p.IP
}

func (p *DialAddDialServerArgs) GetTyp() DialServerType {
	return p.Typ
}
func (p *DialAddDialServerArgs) IsSetIP() bool {
	return p.IP != nil
}

func (p *DialAddDialServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddDialServerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ObjectId(v)
		p.Rid = temp
	}
	return nil
}

func (p *DialAddDialServerArgs) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *DialAddDialServerArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := DialServerType(v)
		p.Typ = temp
	}
	return nil
}

func (p *DialAddDialServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDialServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddDialServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Rid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rid: ", p), err)
	}
	return err
}

func (p *DialAddDialServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *DialAddDialServerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("typ", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:typ: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Typ)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.typ (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:typ: ", p), err)
	}
	return err
}

func (p *DialAddDialServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddDialServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddDialServerResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddDialServerResult() *DialAddDialServerResult {
	return &DialAddDialServerResult{}
}

var DialAddDialServerResult_Success_DEFAULT RetCode

func (p *DialAddDialServerResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddDialServerResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddDialServerResult_Ex_DEFAULT *Xception

func (p *DialAddDialServerResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddDialServerResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddDialServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddDialServerResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddDialServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddDialServerResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddDialServerResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddDialServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDialServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddDialServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddDialServerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddDialServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddDialServerResult(%+v)", *p)
}

// Attributes:
//  - Rid
type DialDelDialServerArgs struct {
	Rid ObjectId `thrift:"rid,1" json:"rid"`
}

func NewDialDelDialServerArgs() *DialDelDialServerArgs {
	return &DialDelDialServerArgs{}
}

func (p *DialDelDialServerArgs) GetRid() ObjectId {
	return p.Rid
}
func (p *DialDelDialServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelDialServerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ObjectId(v)
		p.Rid = temp
	}
	return nil
}

func (p *DialDelDialServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDialServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelDialServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Rid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rid: ", p), err)
	}
	return err
}

func (p *DialDelDialServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelDialServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelDialServerResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelDialServerResult() *DialDelDialServerResult {
	return &DialDelDialServerResult{}
}

var DialDelDialServerResult_Success_DEFAULT RetCode

func (p *DialDelDialServerResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelDialServerResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelDialServerResult_Ex_DEFAULT *Xception

func (p *DialDelDialServerResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelDialServerResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelDialServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelDialServerResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelDialServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelDialServerResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelDialServerResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelDialServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDialServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelDialServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelDialServerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelDialServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelDialServerResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - PolicyName
type DialAddNginxGroupArgs struct {
	GroupName  string `thrift:"groupName,1" json:"groupName"`
	PolicyName string `thrift:"policyName,2" json:"policyName"`
}

func NewDialAddNginxGroupArgs() *DialAddNginxGroupArgs {
	return &DialAddNginxGroupArgs{}
}

func (p *DialAddNginxGroupArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialAddNginxGroupArgs) GetPolicyName() string {
	return p.PolicyName
}
func (p *DialAddNginxGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddNginxGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialAddNginxGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *DialAddNginxGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addNginxGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddNginxGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialAddNginxGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policyName: ", p), err)
	}
	return err
}

func (p *DialAddNginxGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddNginxGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddNginxGroupResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddNginxGroupResult() *DialAddNginxGroupResult {
	return &DialAddNginxGroupResult{}
}

var DialAddNginxGroupResult_Success_DEFAULT RetCode

func (p *DialAddNginxGroupResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddNginxGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddNginxGroupResult_Ex_DEFAULT *Xception

func (p *DialAddNginxGroupResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddNginxGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddNginxGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddNginxGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddNginxGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddNginxGroupResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddNginxGroupResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddNginxGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addNginxGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddNginxGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddNginxGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddNginxGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddNginxGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - PolicyName
type DialDelNginxGroupArgs struct {
	GroupName  string `thrift:"groupName,1" json:"groupName"`
	PolicyName string `thrift:"policyName,2" json:"policyName"`
}

func NewDialDelNginxGroupArgs() *DialDelNginxGroupArgs {
	return &DialDelNginxGroupArgs{}
}

func (p *DialDelNginxGroupArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialDelNginxGroupArgs) GetPolicyName() string {
	return p.PolicyName
}
func (p *DialDelNginxGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelNginxGroupArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialDelNginxGroupArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *DialDelNginxGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delNginxGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelNginxGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialDelNginxGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policyName: ", p), err)
	}
	return err
}

func (p *DialDelNginxGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelNginxGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelNginxGroupResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelNginxGroupResult() *DialDelNginxGroupResult {
	return &DialDelNginxGroupResult{}
}

var DialDelNginxGroupResult_Success_DEFAULT RetCode

func (p *DialDelNginxGroupResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelNginxGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelNginxGroupResult_Ex_DEFAULT *Xception

func (p *DialDelNginxGroupResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelNginxGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelNginxGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelNginxGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelNginxGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelNginxGroupResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelNginxGroupResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelNginxGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delNginxGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelNginxGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelNginxGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelNginxGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelNginxGroupResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - Servers
type DialAddNginxServerArgs struct {
	GroupName string             `thrift:"groupName,1" json:"groupName"`
	Servers   []*DialNginxServer `thrift:"servers,2" json:"servers"`
}

func NewDialAddNginxServerArgs() *DialAddNginxServerArgs {
	return &DialAddNginxServerArgs{}
}

func (p *DialAddNginxServerArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialAddNginxServerArgs) GetServers() []*DialNginxServer {
	return p.Servers
}
func (p *DialAddNginxServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddNginxServerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialAddNginxServerArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DialNginxServer, 0, size)
	p.Servers = tSlice
	for i := 0; i < size; i++ {
		_elem174 := &DialNginxServer{}
		if err := _elem174.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem174), err)
		}
		p.Servers = append(p.Servers, _elem174)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialAddNginxServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addNginxServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddNginxServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialAddNginxServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("servers", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:servers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Servers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Servers {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:servers: ", p), err)
	}
	return err
}

func (p *DialAddNginxServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddNginxServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddNginxServerResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddNginxServerResult() *DialAddNginxServerResult {
	return &DialAddNginxServerResult{}
}

var DialAddNginxServerResult_Success_DEFAULT RetCode

func (p *DialAddNginxServerResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddNginxServerResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddNginxServerResult_Ex_DEFAULT *Xception

func (p *DialAddNginxServerResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddNginxServerResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddNginxServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddNginxServerResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddNginxServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddNginxServerResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddNginxServerResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddNginxServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addNginxServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddNginxServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddNginxServerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddNginxServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddNginxServerResult(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - Servers
type DialDelNginxServerArgs struct {
	GroupName string             `thrift:"groupName,1" json:"groupName"`
	Servers   []*DialNginxServer `thrift:"servers,2" json:"servers"`
}

func NewDialDelNginxServerArgs() *DialDelNginxServerArgs {
	return &DialDelNginxServerArgs{}
}

func (p *DialDelNginxServerArgs) GetGroupName() string {
	return p.GroupName
}

func (p *DialDelNginxServerArgs) GetServers() []*DialNginxServer {
	return p.Servers
}
func (p *DialDelNginxServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelNginxServerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *DialDelNginxServerArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DialNginxServer, 0, size)
	p.Servers = tSlice
	for i := 0; i < size; i++ {
		_elem175 := &DialNginxServer{}
		if err := _elem175.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem175), err)
		}
		p.Servers = append(p.Servers, _elem175)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DialDelNginxServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delNginxServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelNginxServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *DialDelNginxServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("servers", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:servers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Servers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Servers {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:servers: ", p), err)
	}
	return err
}

func (p *DialDelNginxServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelNginxServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelNginxServerResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelNginxServerResult() *DialDelNginxServerResult {
	return &DialDelNginxServerResult{}
}

var DialDelNginxServerResult_Success_DEFAULT RetCode

func (p *DialDelNginxServerResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelNginxServerResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelNginxServerResult_Ex_DEFAULT *Xception

func (p *DialDelNginxServerResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelNginxServerResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelNginxServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelNginxServerResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelNginxServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelNginxServerResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelNginxServerResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelNginxServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delNginxServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelNginxServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelNginxServerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelNginxServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelNginxServerResult(%+v)", *p)
}

type DialHeartBeatArgs struct {
}

func NewDialHeartBeatArgs() *DialHeartBeatArgs {
	return &DialHeartBeatArgs{}
}

func (p *DialHeartBeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialHeartBeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartBeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialHeartBeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialHeartBeatResult struct {
	Success *HeartBeatState `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception       `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialHeartBeatResult() *DialHeartBeatResult {
	return &DialHeartBeatResult{}
}

var DialHeartBeatResult_Success_DEFAULT *HeartBeatState

func (p *DialHeartBeatResult) GetSuccess() *HeartBeatState {
	if !p.IsSetSuccess() {
		return DialHeartBeatResult_Success_DEFAULT
	}
	return p.Success
}

var DialHeartBeatResult_Ex_DEFAULT *Xception

func (p *DialHeartBeatResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialHeartBeatResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialHeartBeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialHeartBeatResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialHeartBeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialHeartBeatResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &HeartBeatState{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DialHeartBeatResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialHeartBeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartBeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialHeartBeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialHeartBeatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialHeartBeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialHeartBeatResult(%+v)", *p)
}

// Attributes:
//  - Enable
type DialSetServerStateArgs struct {
	Enable bool `thrift:"enable,1" json:"enable"`
}

func NewDialSetServerStateArgs() *DialSetServerStateArgs {
	return &DialSetServerStateArgs{}
}

func (p *DialSetServerStateArgs) GetEnable() bool {
	return p.Enable
}
func (p *DialSetServerStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialSetServerStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Enable = v
	}
	return nil
}

func (p *DialSetServerStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setServerState_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialSetServerStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enable", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Enable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enable: ", p), err)
	}
	return err
}

func (p *DialSetServerStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialSetServerStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialSetServerStateResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialSetServerStateResult() *DialSetServerStateResult {
	return &DialSetServerStateResult{}
}

var DialSetServerStateResult_Success_DEFAULT RetCode

func (p *DialSetServerStateResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialSetServerStateResult_Success_DEFAULT
	}
	return *p.Success
}

var DialSetServerStateResult_Ex_DEFAULT *Xception

func (p *DialSetServerStateResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialSetServerStateResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialSetServerStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialSetServerStateResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialSetServerStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialSetServerStateResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialSetServerStateResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialSetServerStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setServerState_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialSetServerStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialSetServerStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialSetServerStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialSetServerStateResult(%+v)", *p)
}

// Attributes:
//  - Snmp
type DialAddSnmpGroupInfoArgs struct {
	Snmp *SnmpGroupInfo `thrift:"snmp,1" json:"snmp"`
}

func NewDialAddSnmpGroupInfoArgs() *DialAddSnmpGroupInfoArgs {
	return &DialAddSnmpGroupInfoArgs{}
}

var DialAddSnmpGroupInfoArgs_Snmp_DEFAULT *SnmpGroupInfo

func (p *DialAddSnmpGroupInfoArgs) GetSnmp() *SnmpGroupInfo {
	if !p.IsSetSnmp() {
		return DialAddSnmpGroupInfoArgs_Snmp_DEFAULT
	}
	return p.Snmp
}
func (p *DialAddSnmpGroupInfoArgs) IsSetSnmp() bool {
	return p.Snmp != nil
}

func (p *DialAddSnmpGroupInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddSnmpGroupInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Snmp = &SnmpGroupInfo{}
	if err := p.Snmp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Snmp), err)
	}
	return nil
}

func (p *DialAddSnmpGroupInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSnmpGroupInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddSnmpGroupInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snmp", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snmp: ", p), err)
	}
	if err := p.Snmp.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Snmp), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snmp: ", p), err)
	}
	return err
}

func (p *DialAddSnmpGroupInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddSnmpGroupInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddSnmpGroupInfoResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddSnmpGroupInfoResult() *DialAddSnmpGroupInfoResult {
	return &DialAddSnmpGroupInfoResult{}
}

var DialAddSnmpGroupInfoResult_Success_DEFAULT RetCode

func (p *DialAddSnmpGroupInfoResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddSnmpGroupInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddSnmpGroupInfoResult_Ex_DEFAULT *Xception

func (p *DialAddSnmpGroupInfoResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddSnmpGroupInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddSnmpGroupInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddSnmpGroupInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddSnmpGroupInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddSnmpGroupInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddSnmpGroupInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddSnmpGroupInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSnmpGroupInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddSnmpGroupInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddSnmpGroupInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddSnmpGroupInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddSnmpGroupInfoResult(%+v)", *p)
}

// Attributes:
//  - Snmp
type DialDelSnmpGroupInfoArgs struct {
	Snmp string `thrift:"snmp,1" json:"snmp"`
}

func NewDialDelSnmpGroupInfoArgs() *DialDelSnmpGroupInfoArgs {
	return &DialDelSnmpGroupInfoArgs{}
}

func (p *DialDelSnmpGroupInfoArgs) GetSnmp() string {
	return p.Snmp
}
func (p *DialDelSnmpGroupInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelSnmpGroupInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Snmp = v
	}
	return nil
}

func (p *DialDelSnmpGroupInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delSnmpGroupInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelSnmpGroupInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snmp", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snmp: ", p), err)
	}
	if err := oprot.WriteString(string(p.Snmp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snmp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snmp: ", p), err)
	}
	return err
}

func (p *DialDelSnmpGroupInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelSnmpGroupInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelSnmpGroupInfoResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelSnmpGroupInfoResult() *DialDelSnmpGroupInfoResult {
	return &DialDelSnmpGroupInfoResult{}
}

var DialDelSnmpGroupInfoResult_Success_DEFAULT RetCode

func (p *DialDelSnmpGroupInfoResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelSnmpGroupInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelSnmpGroupInfoResult_Ex_DEFAULT *Xception

func (p *DialDelSnmpGroupInfoResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelSnmpGroupInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelSnmpGroupInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelSnmpGroupInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelSnmpGroupInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelSnmpGroupInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelSnmpGroupInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelSnmpGroupInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delSnmpGroupInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelSnmpGroupInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelSnmpGroupInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelSnmpGroupInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelSnmpGroupInfoResult(%+v)", *p)
}

// Attributes:
//  - Snmp
//  - Processname
type DialAddSnmpProcessInfoArgs struct {
	Snmp        string `thrift:"snmp,1" json:"snmp"`
	Processname string `thrift:"processname,2" json:"processname"`
}

func NewDialAddSnmpProcessInfoArgs() *DialAddSnmpProcessInfoArgs {
	return &DialAddSnmpProcessInfoArgs{}
}

func (p *DialAddSnmpProcessInfoArgs) GetSnmp() string {
	return p.Snmp
}

func (p *DialAddSnmpProcessInfoArgs) GetProcessname() string {
	return p.Processname
}
func (p *DialAddSnmpProcessInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddSnmpProcessInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Snmp = v
	}
	return nil
}

func (p *DialAddSnmpProcessInfoArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Processname = v
	}
	return nil
}

func (p *DialAddSnmpProcessInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSnmpProcessInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddSnmpProcessInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snmp", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snmp: ", p), err)
	}
	if err := oprot.WriteString(string(p.Snmp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snmp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snmp: ", p), err)
	}
	return err
}

func (p *DialAddSnmpProcessInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("processname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:processname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Processname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.processname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:processname: ", p), err)
	}
	return err
}

func (p *DialAddSnmpProcessInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddSnmpProcessInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddSnmpProcessInfoResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddSnmpProcessInfoResult() *DialAddSnmpProcessInfoResult {
	return &DialAddSnmpProcessInfoResult{}
}

var DialAddSnmpProcessInfoResult_Success_DEFAULT RetCode

func (p *DialAddSnmpProcessInfoResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddSnmpProcessInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddSnmpProcessInfoResult_Ex_DEFAULT *Xception

func (p *DialAddSnmpProcessInfoResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddSnmpProcessInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddSnmpProcessInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddSnmpProcessInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddSnmpProcessInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddSnmpProcessInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddSnmpProcessInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddSnmpProcessInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSnmpProcessInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddSnmpProcessInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddSnmpProcessInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddSnmpProcessInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddSnmpProcessInfoResult(%+v)", *p)
}

// Attributes:
//  - Snmp
//  - Processname
type DialDelSnmpProcessInfoArgs struct {
	Snmp        string `thrift:"snmp,1" json:"snmp"`
	Processname string `thrift:"processname,2" json:"processname"`
}

func NewDialDelSnmpProcessInfoArgs() *DialDelSnmpProcessInfoArgs {
	return &DialDelSnmpProcessInfoArgs{}
}

func (p *DialDelSnmpProcessInfoArgs) GetSnmp() string {
	return p.Snmp
}

func (p *DialDelSnmpProcessInfoArgs) GetProcessname() string {
	return p.Processname
}
func (p *DialDelSnmpProcessInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelSnmpProcessInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Snmp = v
	}
	return nil
}

func (p *DialDelSnmpProcessInfoArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Processname = v
	}
	return nil
}

func (p *DialDelSnmpProcessInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delSnmpProcessInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelSnmpProcessInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snmp", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snmp: ", p), err)
	}
	if err := oprot.WriteString(string(p.Snmp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snmp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snmp: ", p), err)
	}
	return err
}

func (p *DialDelSnmpProcessInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("processname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:processname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Processname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.processname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:processname: ", p), err)
	}
	return err
}

func (p *DialDelSnmpProcessInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelSnmpProcessInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelSnmpProcessInfoResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelSnmpProcessInfoResult() *DialDelSnmpProcessInfoResult {
	return &DialDelSnmpProcessInfoResult{}
}

var DialDelSnmpProcessInfoResult_Success_DEFAULT RetCode

func (p *DialDelSnmpProcessInfoResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelSnmpProcessInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelSnmpProcessInfoResult_Ex_DEFAULT *Xception

func (p *DialDelSnmpProcessInfoResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelSnmpProcessInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelSnmpProcessInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelSnmpProcessInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelSnmpProcessInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelSnmpProcessInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelSnmpProcessInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelSnmpProcessInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delSnmpProcessInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelSnmpProcessInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelSnmpProcessInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelSnmpProcessInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelSnmpProcessInfoResult(%+v)", *p)
}

// Attributes:
//  - Ipsec
//  - Interval
type DialAddIpSecArgs struct {
	Ipsec    *SysIpSec `thrift:"ipsec,1" json:"ipsec"`
	Interval int32     `thrift:"interval,2" json:"interval"`
}

func NewDialAddIpSecArgs() *DialAddIpSecArgs {
	return &DialAddIpSecArgs{}
}

var DialAddIpSecArgs_Ipsec_DEFAULT *SysIpSec

func (p *DialAddIpSecArgs) GetIpsec() *SysIpSec {
	if !p.IsSetIpsec() {
		return DialAddIpSecArgs_Ipsec_DEFAULT
	}
	return p.Ipsec
}

func (p *DialAddIpSecArgs) GetInterval() int32 {
	return p.Interval
}
func (p *DialAddIpSecArgs) IsSetIpsec() bool {
	return p.Ipsec != nil
}

func (p *DialAddIpSecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddIpSecArgs) readField1(iprot thrift.TProtocol) error {
	p.Ipsec = &SysIpSec{}
	if err := p.Ipsec.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ipsec), err)
	}
	return nil
}

func (p *DialAddIpSecArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Interval = v
	}
	return nil
}

func (p *DialAddIpSecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addIpSec_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddIpSecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipsec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ipsec: ", p), err)
	}
	if err := p.Ipsec.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ipsec), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ipsec: ", p), err)
	}
	return err
}

func (p *DialAddIpSecArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interval", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interval: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Interval)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interval (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interval: ", p), err)
	}
	return err
}

func (p *DialAddIpSecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddIpSecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddIpSecResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddIpSecResult() *DialAddIpSecResult {
	return &DialAddIpSecResult{}
}

var DialAddIpSecResult_Success_DEFAULT RetCode

func (p *DialAddIpSecResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddIpSecResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddIpSecResult_Ex_DEFAULT *Xception

func (p *DialAddIpSecResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddIpSecResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddIpSecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddIpSecResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddIpSecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddIpSecResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddIpSecResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddIpSecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addIpSec_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddIpSecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddIpSecResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddIpSecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddIpSecResult(%+v)", *p)
}

// Attributes:
//  - Ipsecid
type DialDelIpSecArgs struct {
	Ipsecid string `thrift:"ipsecid,1" json:"ipsecid"`
}

func NewDialDelIpSecArgs() *DialDelIpSecArgs {
	return &DialDelIpSecArgs{}
}

func (p *DialDelIpSecArgs) GetIpsecid() string {
	return p.Ipsecid
}
func (p *DialDelIpSecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelIpSecArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ipsecid = v
	}
	return nil
}

func (p *DialDelIpSecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delIpSec_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelIpSecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipsecid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ipsecid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ipsecid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ipsecid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ipsecid: ", p), err)
	}
	return err
}

func (p *DialDelIpSecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelIpSecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelIpSecResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelIpSecResult() *DialDelIpSecResult {
	return &DialDelIpSecResult{}
}

var DialDelIpSecResult_Success_DEFAULT RetCode

func (p *DialDelIpSecResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelIpSecResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelIpSecResult_Ex_DEFAULT *Xception

func (p *DialDelIpSecResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelIpSecResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelIpSecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelIpSecResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelIpSecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelIpSecResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelIpSecResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelIpSecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delIpSec_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelIpSecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelIpSecResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelIpSecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelIpSecResult(%+v)", *p)
}

// Attributes:
//  - Dc
type DialAddDcInfoArgs struct {
	Dc *DcInfo `thrift:"dc,1" json:"dc"`
}

func NewDialAddDcInfoArgs() *DialAddDcInfoArgs {
	return &DialAddDcInfoArgs{}
}

var DialAddDcInfoArgs_Dc_DEFAULT *DcInfo

func (p *DialAddDcInfoArgs) GetDc() *DcInfo {
	if !p.IsSetDc() {
		return DialAddDcInfoArgs_Dc_DEFAULT
	}
	return p.Dc
}
func (p *DialAddDcInfoArgs) IsSetDc() bool {
	return p.Dc != nil
}

func (p *DialAddDcInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddDcInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.Dc = &DcInfo{}
	if err := p.Dc.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dc), err)
	}
	return nil
}

func (p *DialAddDcInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDcInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddDcInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dc", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dc: ", p), err)
	}
	if err := p.Dc.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dc), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dc: ", p), err)
	}
	return err
}

func (p *DialAddDcInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddDcInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialAddDcInfoResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialAddDcInfoResult() *DialAddDcInfoResult {
	return &DialAddDcInfoResult{}
}

var DialAddDcInfoResult_Success_DEFAULT RetCode

func (p *DialAddDcInfoResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialAddDcInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var DialAddDcInfoResult_Ex_DEFAULT *Xception

func (p *DialAddDcInfoResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialAddDcInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialAddDcInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialAddDcInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialAddDcInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialAddDcInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialAddDcInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialAddDcInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDcInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialAddDcInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialAddDcInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialAddDcInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialAddDcInfoResult(%+v)", *p)
}

// Attributes:
//  - ID
type DialDelDcInfoArgs struct {
	ID string `thrift:"id,1" json:"id"`
}

func NewDialDelDcInfoArgs() *DialDelDcInfoArgs {
	return &DialDelDcInfoArgs{}
}

func (p *DialDelDcInfoArgs) GetID() string {
	return p.ID
}
func (p *DialDelDcInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelDcInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DialDelDcInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDcInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelDcInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *DialDelDcInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelDcInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DialDelDcInfoResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDialDelDcInfoResult() *DialDelDcInfoResult {
	return &DialDelDcInfoResult{}
}

var DialDelDcInfoResult_Success_DEFAULT RetCode

func (p *DialDelDcInfoResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DialDelDcInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var DialDelDcInfoResult_Ex_DEFAULT *Xception

func (p *DialDelDcInfoResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DialDelDcInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DialDelDcInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DialDelDcInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DialDelDcInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DialDelDcInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DialDelDcInfoResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DialDelDcInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDcInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DialDelDcInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DialDelDcInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DialDelDcInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DialDelDcInfoResult(%+v)", *p)
}
