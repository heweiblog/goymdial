// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"rpc/dial/yamutech/com"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  RetCode registerModule(ModuleType typ)")
	fmt.Fprintln(os.Stderr, "  RetCode updateHealthStatus( results)")
	fmt.Fprintln(os.Stderr, "  RetCode updateServerStatus( results)")
	fmt.Fprintln(os.Stderr, "  RetCode updateDcStatus( results)")
	fmt.Fprintln(os.Stderr, "  RetCode updateNginxStatus( results)")
	fmt.Fprintln(os.Stderr, "  RetCode updateSysInfo(string snmp, SysInfo sysinfo)")
	fmt.Fprintln(os.Stderr, "  RetCode updateInterfaceInfo(string snmp,  interfaces)")
	fmt.Fprintln(os.Stderr, "  RetCode updateInterfaceTraffic(string snmp,  traffic)")
	fmt.Fprintln(os.Stderr, "  RetCode updateInterfaceIpMac(string snmp,  ipmac)")
	fmt.Fprintln(os.Stderr, "  RetCode updateRouteInfo(string snmp,  routeinfo)")
	fmt.Fprintln(os.Stderr, "  RetCode updateProcessInfo(string snmp, ProcessInfo processinfo)")
	fmt.Fprintln(os.Stderr, "  RetCode updateIpSecOnlineIp(string ipsecid,  iplist)")
	fmt.Fprintln(os.Stderr, "  RetCode updateMacTable(string snmp,  mactable)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := com.NewAgentClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "registerModule":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RegisterModule requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := com.ModuleType(tmp0)
		value0 := argvalue0
		fmt.Print(client.RegisterModule(value0))
		fmt.Print("\n")
		break
	case "updateHealthStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateHealthStatus requires 1 args")
			flag.Usage()
		}
		arg42 := flag.Arg(1)
		mbTrans43 := thrift.NewTMemoryBufferLen(len(arg42))
		defer mbTrans43.Close()
		_, err44 := mbTrans43.WriteString(arg42)
		if err44 != nil {
			Usage()
			return
		}
		factory45 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt46 := factory45.GetProtocol(mbTrans43)
		containerStruct0 := com.NewAgentUpdateHealthStatusArgs()
		err47 := containerStruct0.ReadField1(jsProt46)
		if err47 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Results
		value0 := argvalue0
		fmt.Print(client.UpdateHealthStatus(value0))
		fmt.Print("\n")
		break
	case "updateServerStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateServerStatus requires 1 args")
			flag.Usage()
		}
		arg48 := flag.Arg(1)
		mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
		defer mbTrans49.Close()
		_, err50 := mbTrans49.WriteString(arg48)
		if err50 != nil {
			Usage()
			return
		}
		factory51 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt52 := factory51.GetProtocol(mbTrans49)
		containerStruct0 := com.NewAgentUpdateServerStatusArgs()
		err53 := containerStruct0.ReadField1(jsProt52)
		if err53 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Results
		value0 := argvalue0
		fmt.Print(client.UpdateServerStatus(value0))
		fmt.Print("\n")
		break
	case "updateDcStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateDcStatus requires 1 args")
			flag.Usage()
		}
		arg54 := flag.Arg(1)
		mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
		defer mbTrans55.Close()
		_, err56 := mbTrans55.WriteString(arg54)
		if err56 != nil {
			Usage()
			return
		}
		factory57 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt58 := factory57.GetProtocol(mbTrans55)
		containerStruct0 := com.NewAgentUpdateDcStatusArgs()
		err59 := containerStruct0.ReadField1(jsProt58)
		if err59 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Results
		value0 := argvalue0
		fmt.Print(client.UpdateDcStatus(value0))
		fmt.Print("\n")
		break
	case "updateNginxStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateNginxStatus requires 1 args")
			flag.Usage()
		}
		arg60 := flag.Arg(1)
		mbTrans61 := thrift.NewTMemoryBufferLen(len(arg60))
		defer mbTrans61.Close()
		_, err62 := mbTrans61.WriteString(arg60)
		if err62 != nil {
			Usage()
			return
		}
		factory63 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt64 := factory63.GetProtocol(mbTrans61)
		containerStruct0 := com.NewAgentUpdateNginxStatusArgs()
		err65 := containerStruct0.ReadField1(jsProt64)
		if err65 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Results
		value0 := argvalue0
		fmt.Print(client.UpdateNginxStatus(value0))
		fmt.Print("\n")
		break
	case "updateSysInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSysInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg67 := flag.Arg(2)
		mbTrans68 := thrift.NewTMemoryBufferLen(len(arg67))
		defer mbTrans68.Close()
		_, err69 := mbTrans68.WriteString(arg67)
		if err69 != nil {
			Usage()
			return
		}
		factory70 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt71 := factory70.GetProtocol(mbTrans68)
		argvalue1 := com.NewSysInfo()
		err72 := argvalue1.Read(jsProt71)
		if err72 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSysInfo(value0, value1))
		fmt.Print("\n")
		break
	case "updateInterfaceInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateInterfaceInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg74 := flag.Arg(2)
		mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
		defer mbTrans75.Close()
		_, err76 := mbTrans75.WriteString(arg74)
		if err76 != nil {
			Usage()
			return
		}
		factory77 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt78 := factory77.GetProtocol(mbTrans75)
		containerStruct1 := com.NewAgentUpdateInterfaceInfoArgs()
		err79 := containerStruct1.ReadField2(jsProt78)
		if err79 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Interfaces
		value1 := argvalue1
		fmt.Print(client.UpdateInterfaceInfo(value0, value1))
		fmt.Print("\n")
		break
	case "updateInterfaceTraffic":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateInterfaceTraffic requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg81 := flag.Arg(2)
		mbTrans82 := thrift.NewTMemoryBufferLen(len(arg81))
		defer mbTrans82.Close()
		_, err83 := mbTrans82.WriteString(arg81)
		if err83 != nil {
			Usage()
			return
		}
		factory84 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt85 := factory84.GetProtocol(mbTrans82)
		containerStruct1 := com.NewAgentUpdateInterfaceTrafficArgs()
		err86 := containerStruct1.ReadField2(jsProt85)
		if err86 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Traffic
		value1 := argvalue1
		fmt.Print(client.UpdateInterfaceTraffic(value0, value1))
		fmt.Print("\n")
		break
	case "updateInterfaceIpMac":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateInterfaceIpMac requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg88 := flag.Arg(2)
		mbTrans89 := thrift.NewTMemoryBufferLen(len(arg88))
		defer mbTrans89.Close()
		_, err90 := mbTrans89.WriteString(arg88)
		if err90 != nil {
			Usage()
			return
		}
		factory91 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt92 := factory91.GetProtocol(mbTrans89)
		containerStruct1 := com.NewAgentUpdateInterfaceIpMacArgs()
		err93 := containerStruct1.ReadField2(jsProt92)
		if err93 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Ipmac
		value1 := argvalue1
		fmt.Print(client.UpdateInterfaceIpMac(value0, value1))
		fmt.Print("\n")
		break
	case "updateRouteInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateRouteInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg95 := flag.Arg(2)
		mbTrans96 := thrift.NewTMemoryBufferLen(len(arg95))
		defer mbTrans96.Close()
		_, err97 := mbTrans96.WriteString(arg95)
		if err97 != nil {
			Usage()
			return
		}
		factory98 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt99 := factory98.GetProtocol(mbTrans96)
		containerStruct1 := com.NewAgentUpdateRouteInfoArgs()
		err100 := containerStruct1.ReadField2(jsProt99)
		if err100 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Routeinfo
		value1 := argvalue1
		fmt.Print(client.UpdateRouteInfo(value0, value1))
		fmt.Print("\n")
		break
	case "updateProcessInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateProcessInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg102 := flag.Arg(2)
		mbTrans103 := thrift.NewTMemoryBufferLen(len(arg102))
		defer mbTrans103.Close()
		_, err104 := mbTrans103.WriteString(arg102)
		if err104 != nil {
			Usage()
			return
		}
		factory105 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt106 := factory105.GetProtocol(mbTrans103)
		argvalue1 := com.NewProcessInfo()
		err107 := argvalue1.Read(jsProt106)
		if err107 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateProcessInfo(value0, value1))
		fmt.Print("\n")
		break
	case "updateIpSecOnlineIp":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateIpSecOnlineIp requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg109 := flag.Arg(2)
		mbTrans110 := thrift.NewTMemoryBufferLen(len(arg109))
		defer mbTrans110.Close()
		_, err111 := mbTrans110.WriteString(arg109)
		if err111 != nil {
			Usage()
			return
		}
		factory112 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt113 := factory112.GetProtocol(mbTrans110)
		containerStruct1 := com.NewAgentUpdateIpSecOnlineIpArgs()
		err114 := containerStruct1.ReadField2(jsProt113)
		if err114 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Iplist
		value1 := argvalue1
		fmt.Print(client.UpdateIpSecOnlineIp(value0, value1))
		fmt.Print("\n")
		break
	case "updateMacTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMacTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg116 := flag.Arg(2)
		mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
		defer mbTrans117.Close()
		_, err118 := mbTrans117.WriteString(arg116)
		if err118 != nil {
			Usage()
			return
		}
		factory119 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt120 := factory119.GetProtocol(mbTrans117)
		containerStruct1 := com.NewAgentUpdateMacTableArgs()
		err121 := containerStruct1.ReadField2(jsProt120)
		if err121 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Mactable
		value1 := argvalue1
		fmt.Print(client.UpdateMacTable(value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
