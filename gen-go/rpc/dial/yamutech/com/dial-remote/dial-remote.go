// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"rpc/dial/yamutech/com"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  RetCode systemCommand(SysCommand cmdType)")
	fmt.Fprintln(os.Stderr, "  RetCode addHealthGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode delHealthGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode addHealthRecord(string groupName,  records)")
	fmt.Fprintln(os.Stderr, "  RetCode delHealthRecord(string groupName,  records)")
	fmt.Fprintln(os.Stderr, "  RetCode addHealthPolicy(HealthPolicyInfo policy)")
	fmt.Fprintln(os.Stderr, "  RetCode modHealthPolicy(HealthPolicyInfo policy)")
	fmt.Fprintln(os.Stderr, "  RetCode delHealthPolicy(HealthPolicyInfo policy)")
	fmt.Fprintln(os.Stderr, "  RetCode addDialServer(ObjectId rid, IpAddr ip, DialServerType typ)")
	fmt.Fprintln(os.Stderr, "  RetCode delDialServer(ObjectId rid)")
	fmt.Fprintln(os.Stderr, "  RetCode addNginxGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode delNginxGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode addNginxServer(string groupName,  servers)")
	fmt.Fprintln(os.Stderr, "  RetCode delNginxServer(string groupName,  servers)")
	fmt.Fprintln(os.Stderr, "  HeartBeatState heartBeat()")
	fmt.Fprintln(os.Stderr, "  RetCode setServerState(bool enable)")
	fmt.Fprintln(os.Stderr, "  RetCode addSnmpGroupInfo(SnmpGroupInfo snmp)")
	fmt.Fprintln(os.Stderr, "  RetCode delSnmpGroupInfo(string snmp)")
	fmt.Fprintln(os.Stderr, "  RetCode addSnmpProcessInfo(string snmp, string processname)")
	fmt.Fprintln(os.Stderr, "  RetCode delSnmpProcessInfo(string snmp, string processname)")
	fmt.Fprintln(os.Stderr, "  RetCode addIpSec(SysIpSec ipsec, i32 interval)")
	fmt.Fprintln(os.Stderr, "  RetCode delIpSec(string ipsecid)")
	fmt.Fprintln(os.Stderr, "  RetCode addDcInfo(DcInfo dc)")
	fmt.Fprintln(os.Stderr, "  RetCode delDcInfo(string id)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := com.NewDialClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "systemCommand":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemCommand requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := com.SysCommand(tmp0)
		value0 := argvalue0
		fmt.Print(client.SystemCommand(value0))
		fmt.Print("\n")
		break
	case "addHealthGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddHealthGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddHealthGroup(value0, value1))
		fmt.Print("\n")
		break
	case "delHealthGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelHealthGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DelHealthGroup(value0, value1))
		fmt.Print("\n")
		break
	case "addHealthRecord":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddHealthRecord requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg181 := flag.Arg(2)
		mbTrans182 := thrift.NewTMemoryBufferLen(len(arg181))
		defer mbTrans182.Close()
		_, err183 := mbTrans182.WriteString(arg181)
		if err183 != nil {
			Usage()
			return
		}
		factory184 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt185 := factory184.GetProtocol(mbTrans182)
		containerStruct1 := com.NewDialAddHealthRecordArgs()
		err186 := containerStruct1.ReadField2(jsProt185)
		if err186 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Records
		value1 := argvalue1
		fmt.Print(client.AddHealthRecord(value0, value1))
		fmt.Print("\n")
		break
	case "delHealthRecord":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelHealthRecord requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg188 := flag.Arg(2)
		mbTrans189 := thrift.NewTMemoryBufferLen(len(arg188))
		defer mbTrans189.Close()
		_, err190 := mbTrans189.WriteString(arg188)
		if err190 != nil {
			Usage()
			return
		}
		factory191 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt192 := factory191.GetProtocol(mbTrans189)
		containerStruct1 := com.NewDialDelHealthRecordArgs()
		err193 := containerStruct1.ReadField2(jsProt192)
		if err193 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Records
		value1 := argvalue1
		fmt.Print(client.DelHealthRecord(value0, value1))
		fmt.Print("\n")
		break
	case "addHealthPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddHealthPolicy requires 1 args")
			flag.Usage()
		}
		arg194 := flag.Arg(1)
		mbTrans195 := thrift.NewTMemoryBufferLen(len(arg194))
		defer mbTrans195.Close()
		_, err196 := mbTrans195.WriteString(arg194)
		if err196 != nil {
			Usage()
			return
		}
		factory197 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt198 := factory197.GetProtocol(mbTrans195)
		argvalue0 := com.NewHealthPolicyInfo()
		err199 := argvalue0.Read(jsProt198)
		if err199 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddHealthPolicy(value0))
		fmt.Print("\n")
		break
	case "modHealthPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ModHealthPolicy requires 1 args")
			flag.Usage()
		}
		arg200 := flag.Arg(1)
		mbTrans201 := thrift.NewTMemoryBufferLen(len(arg200))
		defer mbTrans201.Close()
		_, err202 := mbTrans201.WriteString(arg200)
		if err202 != nil {
			Usage()
			return
		}
		factory203 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt204 := factory203.GetProtocol(mbTrans201)
		argvalue0 := com.NewHealthPolicyInfo()
		err205 := argvalue0.Read(jsProt204)
		if err205 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ModHealthPolicy(value0))
		fmt.Print("\n")
		break
	case "delHealthPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelHealthPolicy requires 1 args")
			flag.Usage()
		}
		arg206 := flag.Arg(1)
		mbTrans207 := thrift.NewTMemoryBufferLen(len(arg206))
		defer mbTrans207.Close()
		_, err208 := mbTrans207.WriteString(arg206)
		if err208 != nil {
			Usage()
			return
		}
		factory209 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt210 := factory209.GetProtocol(mbTrans207)
		argvalue0 := com.NewHealthPolicyInfo()
		err211 := argvalue0.Read(jsProt210)
		if err211 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DelHealthPolicy(value0))
		fmt.Print("\n")
		break
	case "addDialServer":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AddDialServer requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := com.ObjectId(argvalue0)
		arg213 := flag.Arg(2)
		mbTrans214 := thrift.NewTMemoryBufferLen(len(arg213))
		defer mbTrans214.Close()
		_, err215 := mbTrans214.WriteString(arg213)
		if err215 != nil {
			Usage()
			return
		}
		factory216 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt217 := factory216.GetProtocol(mbTrans214)
		argvalue1 := com.NewIpAddr()
		err218 := argvalue1.Read(jsProt217)
		if err218 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := com.DialServerType(tmp2)
		value2 := argvalue2
		fmt.Print(client.AddDialServer(value0, value1, value2))
		fmt.Print("\n")
		break
	case "delDialServer":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelDialServer requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := com.ObjectId(argvalue0)
		fmt.Print(client.DelDialServer(value0))
		fmt.Print("\n")
		break
	case "addNginxGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddNginxGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddNginxGroup(value0, value1))
		fmt.Print("\n")
		break
	case "delNginxGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelNginxGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DelNginxGroup(value0, value1))
		fmt.Print("\n")
		break
	case "addNginxServer":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddNginxServer requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg225 := flag.Arg(2)
		mbTrans226 := thrift.NewTMemoryBufferLen(len(arg225))
		defer mbTrans226.Close()
		_, err227 := mbTrans226.WriteString(arg225)
		if err227 != nil {
			Usage()
			return
		}
		factory228 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt229 := factory228.GetProtocol(mbTrans226)
		containerStruct1 := com.NewDialAddNginxServerArgs()
		err230 := containerStruct1.ReadField2(jsProt229)
		if err230 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Servers
		value1 := argvalue1
		fmt.Print(client.AddNginxServer(value0, value1))
		fmt.Print("\n")
		break
	case "delNginxServer":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelNginxServer requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg232 := flag.Arg(2)
		mbTrans233 := thrift.NewTMemoryBufferLen(len(arg232))
		defer mbTrans233.Close()
		_, err234 := mbTrans233.WriteString(arg232)
		if err234 != nil {
			Usage()
			return
		}
		factory235 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt236 := factory235.GetProtocol(mbTrans233)
		containerStruct1 := com.NewDialDelNginxServerArgs()
		err237 := containerStruct1.ReadField2(jsProt236)
		if err237 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Servers
		value1 := argvalue1
		fmt.Print(client.DelNginxServer(value0, value1))
		fmt.Print("\n")
		break
	case "heartBeat":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "HeartBeat requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.HeartBeat())
		fmt.Print("\n")
		break
	case "setServerState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetServerState requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1) == "true"
		value0 := argvalue0
		fmt.Print(client.SetServerState(value0))
		fmt.Print("\n")
		break
	case "addSnmpGroupInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSnmpGroupInfo requires 1 args")
			flag.Usage()
		}
		arg239 := flag.Arg(1)
		mbTrans240 := thrift.NewTMemoryBufferLen(len(arg239))
		defer mbTrans240.Close()
		_, err241 := mbTrans240.WriteString(arg239)
		if err241 != nil {
			Usage()
			return
		}
		factory242 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt243 := factory242.GetProtocol(mbTrans240)
		argvalue0 := com.NewSnmpGroupInfo()
		err244 := argvalue0.Read(jsProt243)
		if err244 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSnmpGroupInfo(value0))
		fmt.Print("\n")
		break
	case "delSnmpGroupInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelSnmpGroupInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DelSnmpGroupInfo(value0))
		fmt.Print("\n")
		break
	case "addSnmpProcessInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddSnmpProcessInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddSnmpProcessInfo(value0, value1))
		fmt.Print("\n")
		break
	case "delSnmpProcessInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelSnmpProcessInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DelSnmpProcessInfo(value0, value1))
		fmt.Print("\n")
		break
	case "addIpSec":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIpSec requires 2 args")
			flag.Usage()
		}
		arg250 := flag.Arg(1)
		mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
		defer mbTrans251.Close()
		_, err252 := mbTrans251.WriteString(arg250)
		if err252 != nil {
			Usage()
			return
		}
		factory253 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt254 := factory253.GetProtocol(mbTrans251)
		argvalue0 := com.NewSysIpSec()
		err255 := argvalue0.Read(jsProt254)
		if err255 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err256 := (strconv.Atoi(flag.Arg(2)))
		if err256 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.AddIpSec(value0, value1))
		fmt.Print("\n")
		break
	case "delIpSec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelIpSec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DelIpSec(value0))
		fmt.Print("\n")
		break
	case "addDcInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDcInfo requires 1 args")
			flag.Usage()
		}
		arg258 := flag.Arg(1)
		mbTrans259 := thrift.NewTMemoryBufferLen(len(arg258))
		defer mbTrans259.Close()
		_, err260 := mbTrans259.WriteString(arg258)
		if err260 != nil {
			Usage()
			return
		}
		factory261 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt262 := factory261.GetProtocol(mbTrans259)
		argvalue0 := com.NewDcInfo()
		err263 := argvalue0.Read(jsProt262)
		if err263 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDcInfo(value0))
		fmt.Print("\n")
		break
	case "delDcInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelDcInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DelDcInfo(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
